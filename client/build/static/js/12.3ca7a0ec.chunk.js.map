{
  "version": 3,
  "sources": [
    "components/shared/Fields/CheckboxField.js",
    "components/shared/Fields/FormikField.js",
    "components/Dashboard/Project/Services/Services.module.css",
    "components/Dashboard/Project/Services/ServiceForm.js",
    "components/Dashboard/Project/Services/EditServiceForm.js",
    "components/Dashboard/Project/Services/index.js"
  ],
  "names": [
    "CheckboxField",
    "name",
    "value",
    "label",
    "onChange",
    "row",
    "as",
    "Col",
    "className",
    "type",
    "FormikField",
    "placeholder",
    "error",
    "htmlFor",
    "defaultProps",
    "module",
    "exports",
    "ServiceForm",
    "state",
    "addOptions",
    "addons",
    "price",
    "e",
    "setState",
    "target",
    "checked",
    "onSubmit",
    "resetForm",
    "a",
    "preventDefault",
    "addService",
    "props",
    "this",
    "initialValues",
    "render",
    "values",
    "Form",
    "noValidate",
    "data",
    "TextareaField",
    "rows",
    "remove",
    "push",
    "length",
    "map",
    "option",
    "index",
    "Row",
    "lg",
    "styles",
    "button",
    "Button",
    "onClick",
    "key",
    "variant",
    "Component",
    "EditServiceForm",
    "serviceId",
    "content",
    "existingAddons",
    "addonsToDelete",
    "updateService",
    "hideService",
    "id",
    "QuoteService",
    "isModalOpen",
    "toggleModal",
    "editService",
    "services",
    "find",
    "service",
    "getServices",
    "loading",
    "removeService",
    "Loading",
    "Dashboard",
    "Table",
    "striped",
    "bordered",
    "hover",
    "table",
    "ModalDelete",
    "hideModal",
    "deleteState",
    "connect",
    "selectServices",
    "loadingServices",
    "servicesErrors",
    "resetQuotesErrors"
  ],
  "mappings": "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",
  "file": "static/js/12.3ca7a0ec.chunk.js",
  "sourcesContent": [
    "import React from \"react\"\nimport { FormGroup, FormControl, Row, Col } from \"react-bootstrap\"\nimport PropTypes from \"prop-types\"\n\nexport const CheckboxField = ({ name, value, label, onChange, row }) => {\n  return (\n    <Row>\n      <FormGroup as={Col}>\n        <label className=\"ms-checkbox-wrap\">\n          <FormControl\n            type=\"checkbox\"\n            onChange={onChange}\n            className={`form-check-input ${value ? \"checked\" : \"\"}`}\n            name={name}\n            value={value}\n          />\n          <i className=\"ms-checkbox-check\"></i>\n        </label>\n        <span>{label}</span>\n      </FormGroup>\n    </Row>\n  )\n}\n\nCheckboxField.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.bool.isRequired,\n  label: PropTypes.string.isRequired,\n}\n",
    "import React from \"react\"\nimport { FormGroup, FormLabel, Col, Row } from \"react-bootstrap\"\nimport { Field } from \"formik\"\nimport PropTypes from \"prop-types\"\n\nexport const FormikField = ({ type, name, label, placeholder, error }) => {\n  return (\n    <Row>\n      <FormGroup as={Col}>\n        <FormLabel htmlFor={name}>{label}</FormLabel>\n        {error && <div className=\"invalid-feedback\">{error}</div>}\n        <Field\n          type={type}\n          name={name}\n          className={`form-control ${error ? \"is-invalid\" : \"\"}`}\n          placeholder={placeholder}\n        />\n      </FormGroup>\n    </Row>\n  )\n}\n\nFormikField.propTypes = {\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  error: PropTypes.string,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n}\n\nFormikField.defaultProps = {\n  type: \"text\",\n}\n",
    "// extracted by mini-css-extract-plugin\nmodule.exports = {\"option\":\"Services_option__1sBjy\",\"button\":\"Services_button__1jxF6\",\"table\":\"Services_table__20miv\"};",
    "import React, { Component, Fragment } from \"react\"\nimport { Button, Form, Col, Row } from \"react-bootstrap\"\nimport { CheckboxField } from \"@components/shared/Fields/CheckboxField\"\nimport { FormikField } from \"@components/shared/Fields/FormikField\"\nimport { TextareaField } from \"@components/shared/Fields/TextareaField\"\nimport { Formik, FieldArray } from \"formik\"\nimport { FaTimes, FaPlus } from \"react-icons/fa\"\nimport PropTypes from \"prop-types\"\nimport styles from \"./Services.module.css\"\n\nexport class ServiceForm extends Component {\n  state = {\n    addOptions: false,\n    addons: [\n      {\n        name: \"\",\n        price: \"\",\n      },\n    ],\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n    if (e.target.type === \"checkbox\") {\n      if (e.target.checked) {\n        this.setState({ addOptions: true })\n      } else {\n        this.setState({ addOptions: false })\n      }\n    }\n  }\n\n  onSubmit = async (e, state, resetForm) => {\n    e.preventDefault()\n    const { addService } = this.props\n    const { addOptions } = this.state\n    const { name, price, addons } = state\n    if (addOptions) {\n      await addService({ name, price, addons })\n    } else {\n      await addService({ name, price })\n    }\n    this.setState({\n      name: \"\",\n      price: \"\",\n    })\n  }\n\n  render() {\n    const { addOptions } = this.state\n    const { error } = this.props\n    return (\n      <div className=\"ms-panel\">\n        <div className=\"ms-panel-header\">\n          <h6>Add Service</h6>\n        </div>\n        <div className=\"ms-panel-body\">\n          <Formik\n            initialValues={this.state}\n            render={({ values, resetForm }) => {\n              return (\n                <Form noValidate onSubmit={e => this.onSubmit(e, values, resetForm)}>\n                  <FormikField name=\"name\" label=\"Name\" placeholder=\"Ex: Site Visit\" error={error && error.data.name} />\n                  <FormikField name=\"price\" label=\"Price\" placeholder=\"Ex: 400\" error={error && error.data.price} />\n                  <TextareaField name=\"content\" label=\"Content\" rows=\"15\" />\n                  <CheckboxField name=\"addOptions\" label=\"Add Options?\" onChange={this.onChange} />\n                  {addOptions && (\n                    <FieldArray\n                      name=\"addons\"\n                      render={({ remove, push }) => (\n                        <>\n                          {values.addons.length > 0 &&\n                            values.addons.map((option, index) => (\n                              <>\n                                <Row>\n                                  <Col lg={10}>\n                                    <div className={styles.option}>\n                                      <h6>Option {index + 1}</h6>\n                                    </div>\n                                  </Col>\n                                  <Col lg={2} className={styles.button}>\n                                    {index === 0 ? (\n                                      <Button\n                                        onClick={() =>\n                                          push({\n                                            name: \"\",\n                                            price: \"\",\n                                          })\n                                        }\n                                        className=\"btn btn-success\"\n                                        name=\"button\"\n                                      >\n                                        <FaPlus />\n                                      </Button>\n                                    ) : (\n                                      <Button onClick={() => remove(index)} className=\"btn btn-danger\" name=\"button\">\n                                        <FaTimes />\n                                      </Button>\n                                    )}\n                                  </Col>\n                                </Row>\n                                <Fragment key={index}>\n                                  <FormikField\n                                    name={`addons.${index}.name`}\n                                    label=\"Name\"\n                                    placeholder=\"Ex: Site Visit\"\n                                    error={error && error.data[`name${index}`]}\n                                  />\n                                  <FormikField\n                                    name={`addons.${index}.price`}\n                                    label=\"Price\"\n                                    placeholder=\"Ex: 400\"\n                                    error={error && error.data[`price${index}`]}\n                                  />\n                                </Fragment>\n                              </>\n                            ))}\n                        </>\n                      )}\n                    />\n                  )}\n                  <Row>\n                    <Col className=\"mt-3\">\n                      <Button variant=\"primary\" type=\"submit\" className=\"w-25 float-right\">\n                        Add\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              )\n            }}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nServiceForm.propTypes = {\n  name: PropTypes.string.isRequired,\n}\n",
    "import React, { Component, Fragment } from \"react\"\nimport { Button, Form, Col, Row } from \"react-bootstrap\"\nimport { CheckboxField } from \"@components/shared/Fields/CheckboxField\"\nimport { FormikField } from \"@components/shared/Fields/FormikField\"\nimport { TextareaField } from \"@components/shared/Fields/TextareaField\"\nimport { Formik, FieldArray } from \"formik\"\nimport { FaTimes, FaPlus } from \"react-icons/fa\"\nimport PropTypes from \"prop-types\"\nimport styles from \"./Services.module.css\"\n\nexport class EditServiceForm extends Component {\n  state = {\n    name: this.props.serviceId.name,\n    price: this.props.serviceId.price,\n    content: this.props.serviceId.content,\n    existingAddons: this.props.serviceId.addons,\n    addons: [],\n    addonsToDelete: [],\n    addOptions: false,\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n\n    if (e.target.type === \"checkbox\") {\n      if (e.target.checked) {\n        this.setState({ addOptions: true })\n      } else {\n        this.setState({ addOptions: false })\n      }\n    }\n  }\n\n  /*\n  onChange = (e, serviceId) => {\n    const { addonsToDelete } = this.state\n    if (e.target.checked) {\n      this.setState({ addonsToDelete: [...addonsToDelete, serviceId] })\n    } else {\n      this.setState({ addonsToDelete: addonsToDelete.filter(addon => addon !== serviceId) })\n    }\n  } */\n\n  onSubmit = async (e, state, resetForm) => {\n    e.preventDefault()\n    const { updateService, serviceId, hideService } = this.props\n    const { name, price } = state\n    const { addons, content, addOptions } = this.state\n    await updateService(serviceId.id, { name, price, content, addons })\n    await hideService(null)\n  }\n\n  render() {\n    const { addOptions, name, price, content } = this.state\n    const { error, hideService } = this.props\n    return (\n      <div className=\"ms-panel\">\n        <div className=\"ms-panel-header\">\n          <h6>Edit Service</h6>\n        </div>\n        <div className=\"ms-panel-body\">\n          <Formik\n            initialValues={this.state}\n            render={({ values, resetForm }) => {\n              return (\n                <Form noValidate onSubmit={e => this.onSubmit(e, values, resetForm)}>\n                  <FormikField\n                    name=\"name\"\n                    label=\"Name\"\n                    value={name}\n                    placeholder=\"Ex: Site Visit\"\n                    error={error && error.data.name}\n                  />\n                  <FormikField\n                    name=\"price\"\n                    label=\"Price\"\n                    value={price}\n                    placeholder=\"Ex: 400\"\n                    error={error && error.data.price}\n                  />\n                  <TextareaField name=\"content\" label=\"Content\" value={content} onChange={this.onChange} rows=\"15\" />\n                  <CheckboxField name=\"addOptions\" label=\"Add Options?\" onChange={this.onChange} />\n                  {addOptions && (\n                    <FieldArray\n                      name=\"addons\"\n                      render={({ remove, push }) => (\n                        <>\n                          {values.addons.length > 0 &&\n                            values.addons.map((option, index) => (\n                              <>\n                                <Row>\n                                  <Col lg={10}>\n                                    <div className={styles.option}>\n                                      <h6>Option {index + 1}</h6>\n                                    </div>\n                                  </Col>\n                                  <Col lg={2} className={styles.button}>\n                                    {index === 0 ? (\n                                      <Button\n                                        onClick={() =>\n                                          push({\n                                            name: \"\",\n                                            price: \"\",\n                                          })\n                                        }\n                                        className=\"btn btn-success\"\n                                        name=\"button\"\n                                      >\n                                        <FaPlus />\n                                      </Button>\n                                    ) : (\n                                      <Button onClick={() => remove(index)} className=\"btn btn-danger\" name=\"button\">\n                                        <FaTimes />\n                                      </Button>\n                                    )}\n                                  </Col>\n                                </Row>\n                                <Fragment key={index}>\n                                  <FormikField\n                                    name={`addons.${index}.name`}\n                                    label=\"Name\"\n                                    placeholder=\"Ex: Site Visit\"\n                                    error={error && error.data[`name${index}`]}\n                                  />\n                                  <FormikField\n                                    name={`addons.${index}.price`}\n                                    label=\"Price\"\n                                    placeholder=\"Ex: 400\"\n                                    error={error && error.data[`price${index}`]}\n                                  />\n                                </Fragment>\n                              </>\n                            ))}\n                        </>\n                      )}\n                    />\n                  )}\n                  <Row>\n                    <Col className=\"mt-3\">\n                      <Button variant=\"primary\" type=\"submit\" className=\"w-25 float-right\">\n                        Update\n                      </Button>\n                      <Button className=\"btn btn-primary w-25 mr-1 float-right\" onClick={() => hideService(null)}>\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              )\n            }}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nEditServiceForm.propTypes = {\n  name: PropTypes.string.isRequired,\n}\n",
    "import React, { Component } from \"react\"\nimport { Row, Col, Table, Button } from \"react-bootstrap\"\nimport { connect } from \"react-redux\"\nimport { compose } from \"redux\"\nimport { withRouter } from \"react-router-dom\"\nimport { getServices, addService, removeService, updateService, resetQuotesErrors } from \"@actions/quote\"\nimport { ServiceForm } from \"@components/Dashboard/Project/Services/ServiceForm\"\nimport { EditServiceForm } from \"@components/Dashboard/Project/Services/EditServiceForm\"\nimport { selectServices, loadingServices, servicesErrors } from \"@selectors/quote\"\nimport { Dashboard } from \"@components/Dashboard\"\nimport { ModalDelete } from \"@components/shared/ModalDelete\"\nimport { Loading } from \"@components/shared/Loading\"\nimport PropTypes from \"prop-types\"\nimport styles from \"./Services.module.css\"\n\nclass QuoteService extends Component {\n  state = {\n    isModalOpen: null,\n    serviceId: null,\n  }\n\n  componentDidMount() {\n    this.props.getServices()\n  }\n\n  toggleModal = isModalOpen => {\n    this.setState({ isModalOpen })\n  }\n\n  editService = id => {\n    const { services } = this.props\n    this.setState({ serviceId: services.find(service => service.id === id) })\n  }\n\n  render() {\n    const { error, loading, services, removeService } = this.props\n    const { isModalOpen, serviceId } = this.state\n\n    if (loading) return <Loading />\n    if (!services.length) return null\n    return (\n      <Dashboard>\n        <div className=\"ms-panel\">\n          <div className=\"ms-panel-header\">\n            <h6>Project Services</h6>\n          </div>\n          <div className=\"ms-panel-body\">\n            <Table striped bordered hover className={styles.table}>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Price</th>\n                  <th>Options</th>\n                  <th>Edit</th>\n                  <th>Delete?</th>\n                </tr>\n              </thead>\n              <tbody>\n                {services.map(({ id, name, price, addons }) => (\n                  <tr key={id}>\n                    <td>{name}</td>\n                    <td>{price} £</td>\n                    <td>\n                      {addons.length\n                        ? addons.map(({ name, price }) => (\n                            <p>\n                              {name} - {price} £\n                            </p>\n                          ))\n                        : \"N/A\"}\n                    </td>\n                    <td>\n                      <Button id={id} variant=\"primary\" onClick={() => this.editService(id)}>\n                        Edit/Add Item\n                      </Button>\n                    </td>\n                    <td>\n                      <Button\n                        id={id}\n                        variant=\"primary\"\n                        onClick={() => {\n                          this.toggleModal(id)\n                        }}\n                      >\n                        Delete Item\n                      </Button>\n                      <ModalDelete\n                        id={id}\n                        hideModal={this.toggleModal}\n                        isModalOpen={isModalOpen}\n                        deleteState={() => removeService(id)}\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </div>\n        </div>\n        <Row>\n          <Col lg=\"6\">\n            {serviceId ? (\n              <EditServiceForm {...this.props} serviceId={serviceId} hideService={this.editService} />\n            ) : (\n              <ServiceForm {...this.props} />\n            )}\n          </Col>\n        </Row>\n      </Dashboard>\n    )\n  }\n}\n\nQuoteService.propTypes = {\n  isModalOpen: PropTypes.number.isRequired,\n  loading: PropTypes.bool.isRequired,\n  categories: PropTypes.array.isRequired,\n  getCategories: PropTypes.func.isRequired,\n  removeCategory: PropTypes.func.isRequired,\n  addCategory: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  services: selectServices(state),\n  loading: loadingServices(state),\n  error: servicesErrors(state),\n})\n\nexport default connect(mapStateToProps, { getServices, addService, removeService, updateService, resetQuotesErrors })(\n  QuoteService\n)\n"
  ],
  "sourceRoot": ""
}
