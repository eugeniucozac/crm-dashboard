{
  "version": 3,
  "sources": [
    "components/shared/Fields/SelectField.js",
    "components/shared/ModalAdd.js",
    "components/Dashboard/Inventory/Hardware/HardwareForm.js",
    "components/Dashboard/Inventory/Hardware/EditHardwareForm.js",
    "components/Dashboard/Inventory/Hardware/index.js"
  ],
  "names": [
    "SelectField",
    "name",
    "label",
    "onChange",
    "isModalOpen",
    "hardwares",
    "showModal",
    "add",
    "error",
    "length",
    "as",
    "Col",
    "className",
    "lg",
    "disabled",
    "isInvalid",
    "value",
    "map",
    "id",
    "key",
    "onClick",
    "ModalAdd",
    "hideModal",
    "title",
    "addState",
    "manufactures",
    "errorType",
    "errorManufacture",
    "errorModel",
    "Modal",
    "show",
    "onHide",
    "centered",
    "Form",
    "noValidate",
    "onSubmit",
    "Header",
    "closeButton",
    "ModalBody",
    "TextField",
    "toLowerCase",
    "placeholder",
    "data",
    "manufactureId",
    "ModalFooter",
    "Button",
    "variant",
    "type",
    "HardwareForm",
    "state",
    "getState",
    "typeName",
    "manufactureName",
    "modelName",
    "filterModel",
    "e",
    "target",
    "setState",
    "options",
    "selectedIndex",
    "text",
    "manufacture",
    "model",
    "toggleModal",
    "prevState",
    "addNewType",
    "a",
    "preventDefault",
    "addType",
    "props",
    "console",
    "addNewModel",
    "addModel",
    "addNewManufacture",
    "addManufacture",
    "typeId",
    "modelId",
    "serialNumber",
    "addHardware",
    "isFaulty",
    "this",
    "types",
    "models",
    "Row",
    "Component",
    "EditHardwareForm",
    "hardwareToEdit",
    "updateHardware",
    "hideHardware",
    "Hardware",
    "currentDate",
    "Date",
    "inventoryData",
    "hardwareId",
    "currentPage",
    "addViewIssue",
    "editHardware",
    "find",
    "hardware",
    "pageSwitcher",
    "getManufactures",
    "getModels",
    "getTypes",
    "getHardwares",
    "roleName",
    "loading",
    "removeHardware",
    "lastItem",
    "firstItem",
    "formatedItems",
    "sort",
    "b",
    "createdAt",
    "slice",
    "Loading",
    "Dashboard",
    "Table",
    "striped",
    "bordered",
    "hover",
    "ModalDelete",
    "deleteState",
    "inventory",
    "category",
    "issueCategory",
    "item",
    "connect",
    "selectHardwares",
    "loadingHardwares",
    "hardwareErrors",
    "typeErrors",
    "manufactureErrors",
    "selectRoleAuthorization",
    "selectTypes",
    "selectManufactures",
    "selectModels"
  ],
  "mappings": "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",
  "file": "static/js/17.c98d835c.chunk.js",
  "sourcesContent": [
    "import React from \"react\"\nimport { FormGroup, FormControl, FormLabel, Row, Col, Button } from \"react-bootstrap\"\nimport { FaPlus } from \"react-icons/fa\"\nimport PropTypes from \"prop-types\"\n\nexport const SelectField = ({ name, label, onChange, isModalOpen, hardwares, showModal, add, error }) => {\n  if (!hardwares.length) return null\n  return (\n    <Row>\n      <FormGroup as={Col}>\n        <FormLabel>{label} Name</FormLabel>\n        {error && <div className={`invalid-feedback ${add && \"add\"}`}>{error}</div>}\n        <Row className=\"hardware margin-label\">\n          <Col lg={add ? 10 : null}>\n            <FormControl as=\"select\" name={name} onChange={onChange} disabled={isModalOpen} isInvalid={!!error}>\n              <option value={isModalOpen}>Select {label} Name</option>\n              {hardwares.map(({ id, name }) => (\n                <option key={id} value={id}>\n                  {name}\n                </option>\n              ))}\n            </FormControl>\n          </Col>\n          {add && (\n            <Col lg={2}>\n              <Button onClick={() => showModal(label, add)} className=\"btn btn-success\" name=\"button\">\n                <FaPlus />\n              </Button>\n            </Col>\n          )}\n        </Row>\n      </FormGroup>\n    </Row>\n  )\n}\n\nSelectField.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  hardwares: PropTypes.object.isRequired,\n}\n",
    "import React from \"react\"\nimport { Button, Modal, ModalFooter, ModalBody, Form } from \"react-bootstrap\"\nimport { TextField } from \"@components/shared/Fields/TextField\"\nimport { SelectField } from \"@components/shared/Fields/SelectField\"\nimport { FaShareAlt } from \"react-icons/fa\"\n\nexport const ModalAdd = ({\n  isModalOpen,\n  hideModal,\n  title,\n  onChange,\n  addState,\n  manufactures,\n  errorType,\n  errorManufacture,\n  errorModel,\n}) => {\n  var error\n\n  if (errorManufacture) {\n    error = errorManufacture\n  } else if (errorType) {\n    error = errorType\n  } else if (errorModel) {\n    error = errorModel\n  }\n\n  return (\n    <Modal show={isModalOpen} onHide={hideModal} centered>\n      <Form noValidate onSubmit={addState}>\n        <Modal.Header className=\"bg-primary\" closeButton>\n          <h5 className=\"modal-title has-icon text-white\">\n            <FaShareAlt />\n            {title}\n          </h5>\n        </Modal.Header>\n        <ModalBody>\n          <TextField\n            name={title.toLowerCase()}\n            label=\"Add your new:\"\n            placeholder={`${title} Name`}\n            onChange={onChange}\n            error={error && error.data.name}\n          />\n          {isModalOpen === \"Model\" && (\n            <SelectField\n              name=\"manufactureId\"\n              label=\"Manufacture\"\n              onChange={onChange}\n              hardwares={manufactures}\n              error={error && error.data.manufactureId}\n            />\n          )}\n        </ModalBody>\n        <ModalFooter>\n          <Button variant=\"secondary\" className=\"swal2-styled btn-light\" onClick={hideModal}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" type=\"submit\" className=\"swal2-confirm swal2-styled\">\n            Add\n          </Button>\n        </ModalFooter>\n      </Form>\n    </Modal>\n  )\n}\n",
    "import React, { Component } from \"react\"\nimport { Button, Col, Row, Form } from \"react-bootstrap\"\nimport { TextField } from \"@components/shared/Fields/TextField\"\nimport { SelectField } from \"@components/shared/Fields/SelectField\"\nimport { ModalAdd } from \"@components/shared/ModalAdd\"\n\nexport class HardwareForm extends Component {\n  state = {\n    isModalOpen: \"\",\n    getState: \"\",\n    typeName: \"\",\n    manufactureName: \"\",\n    modelName: \"\",\n    filterModel: 0,\n  }\n\n  onChange = e => {\n    if (e.target.name === \"typeId\") {\n      this.setState({ type: e.target.options[e.target.selectedIndex].text })\n    }\n    if (e.target.name === \"manufactureId\") {\n      this.setState({ manufacture: e.target.options[e.target.selectedIndex].text })\n    }\n    if (e.target.name === \"modelId\") {\n      this.setState({ model: e.target.options[e.target.selectedIndex].text })\n    }\n    this.setState({\n      [e.target.name]: e.target.value,\n      filterModel: this.state.manufactureId,\n    })\n  }\n\n  toggleModal = (name, state) => {\n    this.setState(prevState => {\n      return prevState.isModalOpen\n        ? {\n            isModalOpen: \"\",\n            getState: \"\",\n          }\n        : {\n            isModalOpen: name,\n            getState: state,\n          }\n    })\n  }\n\n  addNewType = async e => {\n    e.preventDefault()\n    const { type } = this.state\n    const { addType } = this.props\n    try {\n      await addType({ name: type })\n      this.setState({\n        isModalOpen: \"\",\n      })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  addNewModel = async e => {\n    e.preventDefault()\n    const { model, manufactureId } = this.state\n    const { addModel } = this.props\n    try {\n      await addModel({\n        name: model,\n        manufactureId,\n      })\n      this.setState({\n        isModalOpen: \"\",\n      })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  addNewManufacture = async e => {\n    e.preventDefault()\n    const { manufacture } = this.state\n    const { addManufacture } = this.props\n    try {\n      await addManufacture({\n        name: manufacture,\n      })\n      this.setState({\n        isModalOpen: \"\",\n      })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  onSubmit = async e => {\n    e.preventDefault()\n    const { typeId, modelId, serialNumber, manufactureId, typeName, manufactureName, modelName } = this.state\n    const { addHardware } = this.props\n    await addHardware(\n      {\n        typeId,\n        manufactureId,\n        modelId,\n        serialNumber,\n        isFaulty: false,\n      },\n      { typeName, manufactureName, modelName }\n    )\n    this.setState({\n      serialNumber: \"\",\n    })\n  }\n\n  render() {\n    const { serialNumber, isModalOpen, getState } = this.state\n    const { error, types, manufactures, models, errorType, errorManufacture, errorModel } = this.props\n\n    return (\n      <>\n        <div className=\"ms-panel-header\">\n          <h6>Add Hardware</h6>\n        </div>\n        <div className=\"ms-panel-body\">\n          <Form noValidate onSubmit={this.onSubmit}>\n            <SelectField\n              name=\"typeId\"\n              label=\"Type\"\n              onChange={this.onChange}\n              isModalOpen={isModalOpen}\n              hardwares={types}\n              showModal={this.toggleModal}\n              add={this.addNewType}\n              error={error && error.data.typeId}\n            />\n            <SelectField\n              name=\"manufactureId\"\n              label=\"Manufacture\"\n              onChange={this.onChange}\n              isModalOpen={isModalOpen}\n              hardwares={manufactures}\n              showModal={this.toggleModal}\n              add={this.addNewManufacture}\n              error={error && error.data.manufactureId}\n            />\n            <SelectField\n              name=\"modelId\"\n              label=\"Model\"\n              onChange={this.onChange}\n              isModalOpen={isModalOpen}\n              hardwares={models}\n              showModal={this.toggleModal}\n              add={this.addNewModel}\n              error={error && error.data.modelId}\n            />\n            <TextField\n              name=\"serialNumber\"\n              value={serialNumber}\n              label=\"Serial Number\"\n              placeholder=\"Ex: 8932\"\n              onChange={this.onChange}\n              error={error && error.data.serialNumber}\n            />\n            <Row>\n              <Col>\n                <Button variant=\"primary\" type=\"submit\" className=\"w-25 float-right\">\n                  Add\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </div>\n        <ModalAdd\n          title={isModalOpen}\n          hideModal={this.toggleModal}\n          addState={getState}\n          isModalOpen={isModalOpen}\n          onChange={this.onChange}\n          manufactures={manufactures}\n          errorType={errorType}\n          errorManufacture={errorManufacture}\n          errorModel={errorModel}\n        />\n      </>\n    )\n  }\n}\n",
    "import React, { Component } from \"react\"\nimport { Col, Row, Form, Button } from \"react-bootstrap\"\nimport { TextField } from \"@components/shared/Fields/TextField\"\nimport PropTypes from \"prop-types\"\n\nexport class EditHardwareForm extends Component {\n  state = {\n    id: this.props.hardwareToEdit.id,\n    serialNumber: this.props.hardwareToEdit.serialNumber,\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  onSubmit = async e => {\n    e.preventDefault()\n    const { updateHardware, hideHardware } = this.props\n    const { id, serialNumber } = this.state\n    await updateHardware(id, { serialNumber })\n    await hideHardware(null)\n  }\n\n  render() {\n    const { serialNumber } = this.state\n    const { error, hideHardware } = this.props\n\n    return (\n      <>\n        <div className=\"ms-panel-header\">\n          <h6>Edit hardware</h6>\n        </div>\n        <div className=\"ms-panel-body\">\n          <Form noValidate onSubmit={this.onSubmit}>\n            <TextField\n              name=\"serialNumber\"\n              value={serialNumber}\n              label=\"Serial Number\"\n              placeholder=\"Ex: 8932\"\n              onChange={this.onChange}\n              error={error && error.data.serialNumber}\n            />\n            <Row>\n              <Col>\n                <Button variant=\"primary\" type=\"submit\" className=\"w-25 float-right\">\n                  Update\n                </Button>\n                <Button className=\"btn btn-primary w-25 mr-1 float-right\" onClick={() => hideHardware(null)}>\n                  Cancel\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </div>\n      </>\n    )\n  }\n}\n\nEditHardwareForm.propTypes = {\n  id: PropTypes.number.isRequired,\n  serialNumber: PropTypes.string.isRequired,\n  updateHardware: PropTypes.func.isRequired,\n  hideHardware: PropTypes.func.isRequired,\n}\n",
    "import React, { Component } from \"react\"\nimport { Row, Col, Table, Button } from \"react-bootstrap\"\nimport { connect } from \"react-redux\"\nimport { Dashboard } from \"@components/Dashboard\"\nimport {\n  getHardwares,\n  getManufactures,\n  removeHardware,\n  addHardware,\n  updateHardware,\n  getTypes,\n  getModels,\n  addType,\n  addManufacture,\n  addModel,\n} from \"@actions/inventory\"\nimport {\n  selectHardwares,\n  loadingHardwares,\n  hardwareErrors,\n  selectTypes,\n  selectManufactures,\n  typeErrors,\n  manufactureErrors,\n  selectModels,\n} from \"selectors/inventory\"\nimport { selectRoleAuthorization } from \"@selectors/authorization\"\nimport { FaChevronLeft, FaChevronRight } from \"react-icons/fa\"\nimport { HardwareForm } from \"@components/Dashboard/Inventory/Hardware/HardwareForm\"\nimport { EditHardwareForm } from \"@components/Dashboard/Inventory/Hardware/EditHardwareForm\"\nimport InventoryIssues from \"@components/Dashboard/Inventory/Issues\"\nimport { ModalDelete } from \"@components/shared/ModalDelete\"\nimport { Loading } from \"@components/shared/Loading\"\nimport { issueCategory } from \"@data\"\nimport PropTypes from \"prop-types\"\n\nclass Hardware extends Component {\n  state = {\n    isModalOpen: null,\n    currentDate: new Date(),\n    inventoryData: null,\n    hardwareId: null,\n    currentPage: 1,\n  }\n\n  componentDidMount() {\n    this.props.getManufactures()\n    this.props.getModels()\n    this.props.getTypes()\n    this.props.getHardwares()\n  }\n\n  toggleModal = isModalOpen => {\n    this.setState({ isModalOpen })\n  }\n\n  addViewIssue = (id, name) => {\n    this.setState({\n      inventoryData: {\n        id,\n        name,\n      },\n    })\n  }\n\n  editHardware = hardwareId => {\n    this.setState({\n      hardwareId: this.props.hardwares.find(hardware => hardware.id === hardwareId),\n    })\n  }\n\n  pageSwitcher = value => {\n    if (value === \"next\") {\n      this.setState({ currentPage: this.state.currentPage + 1 })\n    } else {\n      this.setState({ currentPage: this.state.currentPage - 1 })\n    }\n  }\n\n  render() {\n    const {\n      error,\n      errorType,\n      errorManufacture,\n      roleName,\n      hardwares,\n      addHardware,\n      types,\n      manufactures,\n      models,\n      addType,\n      addManufacture,\n      addModel,\n      updateHardware,\n      loading,\n      removeHardware,\n    } = this.props\n    const { isModalOpen, inventoryData, hardwareId, currentPage } = this.state\n\n    const lastItem = currentPage * 10\n    const firstItem = lastItem - 10\n\n    let formatedItems = []\n    formatedItems =\n      hardwares.length &&\n      hardwares.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).slice(firstItem, lastItem)\n    const renderPageNumbers = () => {\n      return (\n        <Row className=\"pagination\">\n          <Col lg=\"9\">\n            <p>\n              Showing {firstItem + 1}-\n              {hardwares.length > firstItem && hardwares.length < lastItem ? hardwares.length : lastItem} of{\" \"}\n              {hardwares.length} entries\n            </p>\n          </Col>\n          <Col>\n            <div className=\"arrows d-flex justify-content-end\">\n              <Button onClick={() => this.pageSwitcher(\"prev\")} disabled={firstItem === 0}>\n                <FaChevronLeft />\n              </Button>\n              <Button onClick={() => this.pageSwitcher(\"next\")} disabled={lastItem >= hardwares.length}>\n                <FaChevronRight />\n              </Button>\n            </div>\n          </Col>\n        </Row>\n      )\n    }\n\n    if (loading) return <Loading />\n    return (\n      <Dashboard>\n        <div className=\"ms-panel\">\n          <div className=\"ms-panel-header\">\n            <h6>Hardwares</h6>\n          </div>\n          <div className=\"ms-panel-body\">\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>Type</th>\n                  <th>Manufacture</th>\n                  <th>Model</th>\n                  <th>Serial Number</th>\n                  <th>Issues</th>\n                  {(roleName === \"admin\" || roleName === \"technical-manager\") && (\n                    <>\n                      <th>Edit</th>\n                      <th>Delete?</th>\n                    </>\n                  )}\n                </tr>\n              </thead>\n              <tbody>\n                {formatedItems.length\n                  ? formatedItems.map(({ id, serialNumber, type, model }) => (\n                      <tr key={id}>\n                        <td>{type.name}</td>\n                        <td>{model.manufacture.name} </td>\n                        <td>{model.name}</td>\n                        <td>{serialNumber}</td>\n                        <td>\n                          <Button\n                            id={id}\n                            variant=\"primary\"\n                            onClick={() => this.addViewIssue(id, `${model.manufacture.name} ${model.name}`)}\n                          >\n                            Add/View\n                          </Button>\n                        </td>\n                        {(roleName === \"admin\" || roleName === \"technical-manager\") && (\n                          <>\n                            <td>\n                              <Button id={id} variant=\"primary\" onClick={() => this.editHardware(id)}>\n                                Edit/Add Item\n                              </Button>\n                            </td>\n                            <td>\n                              <Button id={id} variant=\"primary\" onClick={() => this.toggleModal(id)}>\n                                Delete Item\n                              </Button>\n                              <ModalDelete\n                                id={id}\n                                hideModal={this.toggleModal}\n                                deleteState={() => removeHardware(id)}\n                                isModalOpen={isModalOpen}\n                              />\n                            </td>\n                          </>\n                        )}\n                      </tr>\n                    ))\n                  : null}\n              </tbody>\n            </Table>\n            {renderPageNumbers()}\n          </div>\n        </div>\n        <Row>\n          {(roleName === \"admin\" || roleName === \"technical-manager\") && (\n            <Col lg=\"5\">\n              <div className=\"ms-panel\">\n                {hardwareId ? (\n                  <EditHardwareForm\n                    hardwareToEdit={hardwareId}\n                    hideHardware={this.editHardware}\n                    updateHardware={updateHardware}\n                    error={error}\n                  />\n                ) : (\n                  <HardwareForm\n                    addHardware={addHardware}\n                    addType={addType}\n                    addManufacture={addManufacture}\n                    addModel={addModel}\n                    types={types}\n                    manufactures={manufactures}\n                    models={models}\n                    error={error}\n                    errorType={errorType}\n                    errorManufacture={errorManufacture}\n                  />\n                )}\n              </div>\n            </Col>\n          )}\n          <Col lg=\"7\">\n            {inventoryData && (\n              <InventoryIssues\n                inventory={inventoryData}\n                addViewIssue={this.addViewIssue}\n                category={issueCategory.find(item => item.name === \"Hardware\")}\n              />\n            )}\n          </Col>\n        </Row>\n      </Dashboard>\n    )\n  }\n}\n\nHardware.propTypes = {\n  isModalOpen: PropTypes.number.isRequired,\n  loading: PropTypes.bool.isRequired,\n  types: PropTypes.array.isRequired,\n  hardwares: PropTypes.array.isRequired,\n  manufacturesAndModels: PropTypes.array.isRequired,\n  getHardwares: PropTypes.func.isRequired,\n  removeHardware: PropTypes.func.isRequired,\n  addHardware: PropTypes.func.isRequired,\n  getTypes: PropTypes.func.isRequired,\n  getModels: PropTypes.func.isRequired,\n  updateHardware: PropTypes.func.isRequired,\n  addType: PropTypes.func.isRequired,\n  addManufacture: PropTypes.func.isRequired,\n  addModel: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  hardwares: selectHardwares(state),\n  loading: loadingHardwares(state),\n  error: hardwareErrors(state),\n  errorType: typeErrors(state),\n  errorManufacture: manufactureErrors(state),\n  roleName: selectRoleAuthorization(state),\n  types: selectTypes(state),\n  manufactures: selectManufactures(state),\n  models: selectModels(state),\n})\n\nexport default connect(mapStateToProps, {\n  getHardwares,\n  removeHardware,\n  getManufactures,\n  addHardware,\n  getTypes,\n  getModels,\n  updateHardware,\n  addType,\n  addManufacture,\n  addModel,\n})(Hardware)\n"
  ],
  "sourceRoot": ""
}
