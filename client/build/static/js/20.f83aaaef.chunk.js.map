{
  "version": 3,
  "sources": [
    "components/Dashboard/Consultants/ChooseRole.js",
    "components/Dashboard/Consultants/Consultant.js",
    "components/Dashboard/Consultants/RegisterConsultant.js",
    "components/Dashboard/Consultants/index.js"
  ],
  "names": [
    "ChooseRole",
    "this",
    "props",
    "getRoles",
    "roleId",
    "roles",
    "changeRole",
    "length",
    "FormControl",
    "as",
    "name",
    "onChange",
    "defaultValue",
    "map",
    "id",
    "key",
    "value",
    "Component",
    "connect",
    "state",
    "selectRole",
    "Consultant",
    "password",
    "isModalOpen",
    "e",
    "setState",
    "target",
    "toggleModal",
    "updateConsultant",
    "a",
    "preventDefault",
    "body",
    "consultant",
    "password2",
    "firstName",
    "lastName",
    "email",
    "role",
    "telNo",
    "mobNo",
    "roleName",
    "authorizedId",
    "removeConsultant",
    "placeholder",
    "type",
    "Button",
    "variant",
    "onClick",
    "ModalDelete",
    "hideModal",
    "deleteState",
    "currentUser",
    "Register",
    "onSubmit",
    "addConsultant",
    "resetErrors",
    "error",
    "Form",
    "noValidate",
    "TextField",
    "label",
    "data",
    "Row",
    "Col",
    "className",
    "Consultants",
    "getConsultants",
    "loading",
    "consultants",
    "Loading",
    "Dashboard",
    "Table",
    "striped",
    "bordered",
    "hover",
    "sort",
    "b",
    "index",
    "lg",
    "RegisterConsultant",
    "selectConsultants",
    "loadingConsultants",
    "consultantErrors",
    "selectRoleAuthorization",
    "selectAuthorizationId"
  ],
  "mappings": "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",
  "file": "static/js/20.f83aaaef.chunk.js",
  "sourcesContent": [
    "import React, { Component } from \"react\"\nimport { FormControl } from \"react-bootstrap\"\nimport { connect } from \"react-redux\"\nimport { getRoles } from \"@actions/consultant\"\nimport { selectRole } from \"@selectors/consultant\"\nimport PropTypes from \"prop-types\"\n\nclass ChooseRole extends Component {\n  componentDidMount() {\n    this.props.getRoles()\n  }\n\n  render() {\n    const { roleId, roles, changeRole } = this.props\n    if (!roles.length) return null\n    return (\n      <FormControl as=\"select\" name=\"roleId\" onChange={changeRole} defaultValue={roleId}>\n        {roles.map(({ id, name }) => (\n          <option key={id} value={id}>\n            {name}\n          </option>\n        ))}\n      </FormControl>\n    )\n  }\n}\n\nChooseRole.propTypes = {\n  roleId: PropTypes.number.isRequired,\n  roles: PropTypes.array.isRequired,\n  getRoles: PropTypes.func.isRequired,\n  changeRole: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  roles: selectRole(state),\n})\n\nexport default connect(mapStateToProps, { getRoles })(ChooseRole)\n",
    "import React, { Component } from \"react\"\nimport { Button, FormControl } from \"react-bootstrap\"\nimport ChooseRole from \"@components/Dashboard/Consultants/ChooseRole\"\nimport { ModalDelete } from \"@components/shared/ModalDelete\"\nimport PropTypes from \"prop-types\"\n\nexport class Consultant extends Component {\n  state = {\n    password: \"\",\n    roleId: \"\",\n    isModalOpen: null,\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  toggleModal = isModalOpen => {\n    this.setState({ isModalOpen })\n  }\n\n  updateConsultant = async (id, e) => {\n    e.preventDefault()\n    let body = {}\n    const { password, roleId } = this.state\n    const { consultant, updateConsultant } = this.props\n\n    if (consultant.id === id) {\n      if (roleId !== \"\") {\n        body = {\n          ...body,\n          roleId,\n        }\n      }\n      if (password !== \"\") {\n        body = {\n          ...body,\n          password,\n          password2: password,\n        }\n      }\n    }\n    await updateConsultant(id, body)\n    this.setState({ password: \"\" })\n  }\n\n  render() {\n    const { isModalOpen } = this.state\n    const {\n      consultant: { id, firstName, lastName, email, role, telNo, mobNo },\n      roleName,\n      authorizedId,\n      removeConsultant,\n    } = this.props\n\n    return (\n      <>\n        <tr key={id}>\n          <td>{firstName}</td>\n          <td>{lastName}</td>\n          <td>{email}</td>\n          <td>{telNo}</td>\n          <td>{mobNo}</td>\n          {roleName === \"admin\" ? (\n            <>\n              <td>\n                <ChooseRole key={id} roleId={role.id} changeRole={this.onChange} />\n              </td>\n              <td>\n                <FormControl onChange={this.onChange} name=\"password\" placeholder=\"New Password\" type=\"text\" />\n              </td>\n              <td>\n                <Button variant=\"primary\" onClick={e => this.updateConsultant(id, e)}>\n                  Update User\n                </Button>\n              </td>\n              <td>\n                <Button id={id} variant=\"primary\" onClick={() => this.toggleModal(id)}>\n                  Remove User\n                </Button>\n              </td>\n            </>\n          ) : (\n            <td>{role.name}</td>\n          )}\n        </tr>\n        <ModalDelete\n          id={id}\n          hideModal={this.toggleModal}\n          isModalOpen={isModalOpen}\n          deleteState={() => removeConsultant(id)}\n          currentUser={authorizedId}\n        />\n      </>\n    )\n  }\n}\n\nConsultant.propTypes = {\n  isModalOpen: PropTypes.number.isRequired,\n  roleId: PropTypes.number.isRequired,\n  password: PropTypes.string.isRequired,\n  updateConsultant: PropTypes.func.isRequired,\n  removeConsultant: PropTypes.func.isRequired,\n}\n",
    "import React, { Component } from \"react\"\nimport { Form, Button, Row, Col } from \"react-bootstrap\"\nimport { TextField } from \"@components/shared/Fields/TextField\"\nimport PropTypes from \"prop-types\"\n\nclass Register extends Component {\n  state = {\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    telNo: \"\",\n    mobNo: \"\",\n    password: \"\",\n    password2: \"\",\n    roleId: 5,\n  }\n\n  componentWillUnmount() {\n    this.props.resetErrors()\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  onSubmit = async e => {\n    e.preventDefault()\n    const { addConsultant } = this.props\n    const { firstName, lastName, email, telNo, mobNo, password, password2, roleId } = this.state\n    await addConsultant({\n      firstName,\n      lastName,\n      email,\n      telNo,\n      mobNo,\n      password,\n      password2,\n      roleId,\n    })\n    this.setState({\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      telNo: \"\",\n      mobNo: \"\",\n      password: \"\",\n      password2: \"\",\n    })\n  }\n\n  render() {\n    const { firstName, lastName, email, telNo, mobNo, password, password2 } = this.state\n    const { error } = this.props\n\n    return (\n      <Form noValidate onSubmit={this.onSubmit}>\n        <TextField\n          name=\"firstName\"\n          value={firstName}\n          label=\"First Name\"\n          placeholder=\"First Name\"\n          onChange={this.onChange}\n          error={error && error.data.firstName}\n        />\n        <TextField\n          name=\"lastName\"\n          value={lastName}\n          label=\"Last Name\"\n          placeholder=\"Last Name\"\n          onChange={this.onChange}\n          error={error && error.data.lastName}\n        />\n        <TextField\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          label=\"Email Address\"\n          placeholder=\"Email Address\"\n          onChange={this.onChange}\n          error={error && error.data.email}\n        />\n        <TextField\n          name=\"telNo\"\n          value={telNo}\n          label=\"Phone Number\"\n          placeholder=\"Phone Number\"\n          onChange={this.onChange}\n          error={error && error.data.telNo}\n        />\n        <TextField\n          name=\"mobNo\"\n          value={mobNo}\n          label=\"Mobile Number\"\n          placeholder=\"Mobile Number\"\n          onChange={this.onChange}\n          error={error && error.data.mobNo}\n        />\n        <TextField\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          label=\"Password\"\n          placeholder=\"Password\"\n          onChange={this.onChange}\n          error={error && error.data.password}\n        />\n        <TextField\n          type=\"password\"\n          name=\"password2\"\n          value={password2}\n          label=\"Confirm Password\"\n          placeholder=\"Confirm Password\"\n          onChange={this.onChange}\n          error={error && error.data.password2}\n        />\n        <Row>\n          <Col>\n            <Button variant=\"primary\" type=\"submit\" className=\"w-25 float-right\">\n              Add\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    )\n  }\n}\n\nRegister.propTypes = {\n  firstName: PropTypes.string.isRequired,\n  lastName: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  telNo: PropTypes.number.isRequired,\n  mobNo: PropTypes.number.isRequired,\n  password: PropTypes.string.isRequired,\n  password2: PropTypes.string.isRequired,\n  roleId: PropTypes.number.isRequired,\n  registerConsultant: PropTypes.func.isRequired,\n}\n\nexport default Register\n",
    "import React, { Component } from \"react\"\nimport { Row, Col, Table } from \"react-bootstrap\"\nimport { connect } from \"react-redux\"\nimport { getConsultants, removeConsultant, updateConsultant, addConsultant, resetErrors } from \"@actions/consultant\"\nimport { selectConsultants, loadingConsultants, consultantErrors } from \"@selectors/consultant\"\nimport { selectRoleAuthorization, selectAuthorizationId } from \"@selectors/authorization\"\nimport { Consultant } from \"@components/Dashboard/Consultants/Consultant\"\nimport { Dashboard } from \"@components/Dashboard\"\nimport RegisterConsultant from \"@components/Dashboard/Consultants/RegisterConsultant\"\nimport { Loading } from \"@components/shared/Loading\"\nimport PropTypes from \"prop-types\"\n\nclass Consultants extends Component {\n  componentDidMount() {\n    this.props.getConsultants()\n  }\n\n  render() {\n    const { roleName, loading, consultants } = this.props\n    if (loading) return <Loading />\n    if (!consultants.length) return null\n\n    return (\n      <Dashboard>\n        <div className=\"ms-panel\">\n          <div className=\"ms-panel-header\">\n            <h6>Consultants</h6>\n          </div>\n          <div className=\"ms-panel-body\">\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>First Name</th>\n                  <th>Last Name</th>\n                  <th>Email</th>\n                  <th>Phone Number</th>\n                  <th>Mobile Number</th>\n                  <th>Role</th>\n                  {roleName === \"admin\" && (\n                    <>\n                      <th>Change Password</th>\n                      <th>Update</th>\n                      <th>Delete?</th>\n                    </>\n                  )}\n                </tr>\n              </thead>\n              <tbody>\n                {consultants\n                  .sort((a, b) => a.role.id - b.role.id)\n                  .map((consultant, index) => {\n                    return <Consultant key={index} consultant={consultant} {...this.props} />\n                  })}\n              </tbody>\n            </Table>\n          </div>\n        </div>\n        {roleName === \"admin\" && (\n          <Row>\n            <Col lg=\"6\">\n              <div className=\"ms-panel\">\n                <div className=\"ms-panel-header\">\n                  <h6>Add a consultant</h6>\n                </div>\n                <div className=\"ms-panel-body\">\n                  <RegisterConsultant {...this.props} />\n                </div>\n              </div>\n            </Col>\n          </Row>\n        )}\n      </Dashboard>\n    )\n  }\n}\n\nConsultants.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  consultants: PropTypes.array.isRequired,\n  getConsultants: PropTypes.func.isRequired,\n  removeConsultant: PropTypes.func.isRequired,\n  updateConsultant: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  consultants: selectConsultants(state),\n  loading: loadingConsultants(state),\n  error: consultantErrors(state),\n  roleName: selectRoleAuthorization(state),\n  authorizedId: selectAuthorizationId(state),\n})\n\nexport default connect(mapStateToProps, {\n  getConsultants,\n  removeConsultant,\n  updateConsultant,\n  addConsultant,\n  resetErrors,\n})(Consultants)\n"
  ],
  "sourceRoot": ""
}
