{
  "version": 3,
  "sources": [
    "components/shared/Fields/SelectField.js",
    "components/Dashboard/Inventory/Model/ModelForm.js",
    "components/Dashboard/Inventory/Model/index.js"
  ],
  "names": [
    "SelectField",
    "name",
    "label",
    "onChange",
    "isModalOpen",
    "hardwares",
    "showModal",
    "add",
    "error",
    "length",
    "as",
    "Col",
    "className",
    "lg",
    "disabled",
    "isInvalid",
    "value",
    "map",
    "id",
    "key",
    "onClick",
    "ModelForm",
    "state",
    "manufactureId",
    "e",
    "setState",
    "target",
    "onSubmit",
    "a",
    "preventDefault",
    "addModel",
    "props",
    "this",
    "resetModelErrors",
    "manufactures",
    "Form",
    "noValidate",
    "TextField",
    "placeholder",
    "data",
    "Row",
    "Button",
    "variant",
    "type",
    "Component",
    "Model",
    "toggleModal",
    "getModels",
    "getManufactures",
    "loading",
    "models",
    "removeModel",
    "Loading",
    "Dashboard",
    "Table",
    "striped",
    "bordered",
    "hover",
    "manufacture",
    "ModalDelete",
    "hideModal",
    "deleteState",
    "connect",
    "selectModels",
    "selectManufactures",
    "modelErrors",
    "loadingModels"
  ],
  "mappings": "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",
  "file": "static/js/18.69144804.chunk.js",
  "sourcesContent": [
    "import React from \"react\"\nimport { FormGroup, FormControl, FormLabel, Row, Col, Button } from \"react-bootstrap\"\nimport { FaPlus } from \"react-icons/fa\"\nimport PropTypes from \"prop-types\"\n\nexport const SelectField = ({ name, label, onChange, isModalOpen, hardwares, showModal, add, error }) => {\n  if (!hardwares.length) return null\n  return (\n    <Row>\n      <FormGroup as={Col}>\n        <FormLabel>{label} Name</FormLabel>\n        {error && <div className={`invalid-feedback ${add && \"add\"}`}>{error}</div>}\n        <Row className=\"hardware margin-label\">\n          <Col lg={add ? 10 : null}>\n            <FormControl as=\"select\" name={name} onChange={onChange} disabled={isModalOpen} isInvalid={!!error}>\n              <option value={isModalOpen}>Select {label} Name</option>\n              {hardwares.map(({ id, name }) => (\n                <option key={id} value={id}>\n                  {name}\n                </option>\n              ))}\n            </FormControl>\n          </Col>\n          {add && (\n            <Col lg={2}>\n              <Button onClick={() => showModal(label, add)} className=\"btn btn-success\" name=\"button\">\n                <FaPlus />\n              </Button>\n            </Col>\n          )}\n        </Row>\n      </FormGroup>\n    </Row>\n  )\n}\n\nSelectField.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  hardwares: PropTypes.object.isRequired,\n}\n",
    "import React, { Component } from \"react\"\nimport { Button, Col, Row, Form } from \"react-bootstrap\"\nimport { TextField } from \"@components/shared/Fields/TextField\"\nimport { SelectField } from \"@components/shared/Fields/SelectField\"\nimport PropTypes from \"prop-types\"\n\nexport class ModelForm extends Component {\n  state = {\n    name: \"\",\n    manufactureId: null,\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  componentWillUnmount() {\n    this.props.resetModelErrors()\n  }\n\n  onSubmit = async e => {\n    e.preventDefault()\n    const { addModel } = this.props\n    const { name, manufactureId } = this.state\n    await addModel({ name, manufactureId })\n    this.setState({ name: \"\", manufactureId: \"\" })\n  }\n\n  render() {\n    const { name, manufactureId } = this.state\n    const { error, manufactures } = this.props\n    return (\n      <Form noValidate onSubmit={this.onSubmit}>\n        <TextField\n          name=\"name\"\n          value={name}\n          label=\"Name\"\n          placeholder=\"Ex: MR-PRO\"\n          onChange={this.onChange}\n          error={error && error.data.name}\n        />\n        <SelectField\n          name=\"manufactureId\"\n          label=\"Manufacture\"\n          value={manufactureId}\n          onChange={this.onChange}\n          hardwares={manufactures}\n          error={error && error.data.manufactureId}\n        />\n        <Row>\n          <Col>\n            <Button variant=\"primary\" type=\"submit\" className=\"w-25 float-right\">\n              Add\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    )\n  }\n}\n\nModelForm.propTypes = {\n  name: PropTypes.string.isRequired,\n  manufactureId: PropTypes.number.isRequired,\n}\n",
    "import React, { Component } from \"react\"\nimport { Row, Col, Table, Button } from \"react-bootstrap\"\nimport { connect } from \"react-redux\"\nimport { getManufactures, getModels, removeModel, addModel, resetModelErrors } from \"@actions/inventory\"\nimport { selectModels, modelErrors, loadingModels, selectManufactures } from \"@selectors/inventory\"\nimport { ModelForm } from \"@components/Dashboard/Inventory/Model/ModelForm\"\nimport { Dashboard } from \"@components/Dashboard\"\nimport { ModalDelete } from \"@components/shared/ModalDelete\"\nimport { Loading } from \"@components/shared/Loading\"\nimport PropTypes from \"prop-types\"\n\nclass Model extends Component {\n  state = {\n    isModalOpen: null,\n  }\n\n  componentDidMount() {\n    this.props.getModels()\n    this.props.getManufactures()\n  }\n\n  toggleModal = isModalOpen => {\n    this.setState({ isModalOpen })\n  }\n\n  render() {\n    const { loading, models, removeModel } = this.props\n    const { isModalOpen } = this.state\n    if (loading) return <Loading />\n    if (!models.length) return null\n    return (\n      <Dashboard>\n        <div className=\"ms-panel\">\n          <div className=\"ms-panel-header\">\n            <h6>Model</h6>\n          </div>\n          <div className=\"ms-panel-body\">\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Manufacure Name</th>\n                  <th>Delete?</th>\n                </tr>\n              </thead>\n              <tbody>\n                {models.map(({ id, name, manufacture }) => (\n                  <tr key={id}>\n                    <td>{name}</td>\n                    <td>{manufacture.name}</td>\n                    <td>\n                      <Button\n                        id={id}\n                        variant=\"primary\"\n                        onClick={() => {\n                          this.toggleModal(id)\n                        }}\n                      >\n                        Delete Item\n                      </Button>\n                      <ModalDelete\n                        id={id}\n                        hideModal={this.toggleModal}\n                        deleteState={() => removeModel(id)}\n                        isModalOpen={isModalOpen}\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </div>\n        </div>\n        <Row>\n          <Col lg=\"5\">\n            <div className=\"ms-panel\">\n              <div className=\"ms-panel-header\">\n                <h6>Add Model</h6>\n              </div>\n              <div className=\"ms-panel-body\">\n                <ModelForm {...this.props} />\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </Dashboard>\n    )\n  }\n}\n\nModel.propTypes = {\n  isModalOpen: PropTypes.number.isRequired,\n  loading: PropTypes.bool.isRequired,\n  models: PropTypes.array.isRequired,\n  getModels: PropTypes.func.isRequired,\n  removeModel: PropTypes.func.isRequired,\n  addModel: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  models: selectModels(state),\n  manufactures: selectManufactures(state),\n  error: modelErrors(state),\n  loading: loadingModels(state),\n})\n\nexport default connect(mapStateToProps, { getManufactures, getModels, removeModel, addModel, resetModelErrors })(Model)\n"
  ],
  "sourceRoot": ""
}
