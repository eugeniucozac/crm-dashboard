{
  "version": 3,
  "sources": [
    "components/shared/Fields/CheckboxField.js",
    "selectors/issue.js",
    "components/shared/RectLoading/index.js",
    "services/issue.js",
    "actions/issue.js",
    "components/shared/RectLoading/Loading.module.css",
    "data/index.js",
    "components/Dashboard/Issues/CreateIssue.js",
    "components/Dashboard/Issues/CreateMessage.js",
    "components/Dashboard/Inventory/Issues/Messages.js",
    "components/Dashboard/Inventory/Issues/IssuesList.js",
    "components/Dashboard/Inventory/Issues/FilteredIssues.js",
    "components/Dashboard/Inventory/Issues/index.js",
    "components/Dashboard/Inventory/Issues/Issues.module.css"
  ],
  "names": [
    "CheckboxField",
    "name",
    "value",
    "label",
    "onChange",
    "row",
    "as",
    "Col",
    "className",
    "type",
    "selectIssues",
    "state",
    "issue",
    "data",
    "loadingIssues",
    "loading",
    "issueErrors",
    "error",
    "selectIssuesByStatus",
    "status",
    "filter",
    "id",
    "selectIssuesByCategoryAndId",
    "hardwareId",
    "categoryId",
    "category",
    "selectIssuesByCategoryId",
    "selectIssuesByCategoryAndName",
    "categoryName",
    "selectIssuesByCategoryName",
    "selectIssuesByStatusOrByCategoryAndName",
    "selectIssueMessages",
    "issueMessage",
    "loadingIssueMessages",
    "issueMessagesErrors",
    "selectSidebarCategories",
    "reduce",
    "categories",
    "el",
    "index",
    "hardwares",
    "Array",
    "isArray",
    "find",
    "hardware",
    "hardwareName",
    "RectLoading",
    "styles",
    "spinner",
    "rect2",
    "rect3",
    "rect4",
    "rect5",
    "getIssues",
    "a",
    "http",
    "url",
    "method",
    "addIssue",
    "body",
    "changeIssueStatus",
    "getIssueMessages",
    "addIssueMessage",
    "dispatch",
    "issues",
    "GET_ISSUES_REQUEST",
    "issueService",
    "GET_ISSUES_SUCCESS",
    "payload",
    "GET_ISSUES_FAILURE",
    "ADD_ISSUE_SUCCESS",
    "ADD_ISSUE_FAILURE",
    "CHANGE_STATUS_SUCCESS",
    "CHANGE_STATUS_FAILURE",
    "GET_MESSAGES_REQUEST",
    "GET_MESSAGES_SUCCESS",
    "GET_MESSAGES_FAILURE",
    "ADD_MESSAGE_SUCCESS",
    "ADD_MESSAGE_FAILURE",
    "resetIssueErrors",
    "RESET_ERRORS_SUCCESS",
    "module",
    "exports",
    "calibrations",
    "issueStatus",
    "issueCategory",
    "CreateIssue",
    "this",
    "props",
    "toggleIssue",
    "consultants",
    "isFaulty",
    "errors",
    "Modal",
    "show",
    "onHide",
    "size",
    "centered",
    "Form",
    "noValidate",
    "onSubmit",
    "Header",
    "closeButton",
    "ModalBody",
    "TextField",
    "placeholder",
    "consultant",
    "role",
    "map",
    "firstName",
    "lastName",
    "disabled",
    "title",
    "TextareaField",
    "message",
    "ModalFooter",
    "Button",
    "variant",
    "onClick",
    "Component",
    "connect",
    "CreateMessage",
    "toggleMessage",
    "addMessage",
    "FormGroup",
    "FormLabel",
    "FormControl",
    "multiple",
    "key",
    "Messages",
    "createMessage",
    "e",
    "target",
    "setState",
    "from",
    "selectedOptions",
    "option",
    "parseInt",
    "preventDefault",
    "consultantId",
    "issueId",
    "consultantsManagers",
    "fromConsultantId",
    "statusId",
    "Set",
    "console",
    "getConsultants",
    "messages",
    "length",
    "createdAt",
    "fromConsultant",
    "moment",
    "format",
    "selectConsultants",
    "selectConsultantsManagers",
    "selectAuthorizationId",
    "IssuesList",
    "showMessages",
    "roleName",
    "charAt",
    "Dropdown",
    "Toggle",
    "Menu",
    "DropdownItem",
    "FilteredIssues",
    "currentPage",
    "pageSwitcher",
    "inventoryId",
    "lastItem",
    "firstItem",
    "formatedIssues",
    "sort",
    "b",
    "Date",
    "slice",
    "Row",
    "InventoryIssues",
    "createIssue",
    "checked",
    "changeStatus",
    "inventory",
    "updateKit",
    "issuesByCatAndId",
    "addViewIssue",
    "item",
    "class",
    "open",
    "closed",
    "selectRoleAuthorization",
    "updateHardware"
  ],
  "mappings": "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",
  "file": "static/js/3.369b8937.chunk.js",
  "sourcesContent": [
    "import React from \"react\"\nimport { FormGroup, FormControl, Row, Col } from \"react-bootstrap\"\nimport PropTypes from \"prop-types\"\n\nexport const CheckboxField = ({ name, value, label, onChange, row }) => {\n  return (\n    <Row>\n      <FormGroup as={Col}>\n        <label className=\"ms-checkbox-wrap\">\n          <FormControl\n            type=\"checkbox\"\n            onChange={onChange}\n            className={`form-check-input ${value ? \"checked\" : \"\"}`}\n            name={name}\n            value={value}\n          />\n          <i className=\"ms-checkbox-check\"></i>\n        </label>\n        <span>{label}</span>\n      </FormGroup>\n    </Row>\n  )\n}\n\nCheckboxField.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.bool.isRequired,\n  label: PropTypes.string.isRequired,\n}\n",
    "export const selectIssues = state => state.issue.data\r\nexport const countIssues = state => state.issue.data.length\r\nexport const loadingIssues = state => state.issue.loading\r\nexport const issueErrors = state => state.issue.error\r\nexport const selectIssuesByStatus = (state, status) =>\r\n  status ? state.issue.data.filter(issue => issue.status.id === status) : state.issue.data\r\nexport const selectIssuesByCategoryId = (state, categoryId) =>\r\n  state.issue.data.filter(issue => issue.category.id === categoryId)\r\nexport const selectIssuesByCategoryName = (state, categoryName) =>\r\n  state.issue.data.filter(issue => issue.category.name === categoryName)\r\nexport const selectIssuesByCategoryAndId = (state, hardwareId, categoryId) => {\r\n  const allByCategories = selectIssuesByCategoryId(state, categoryId)\r\n  return allByCategories.filter(issue => issue.hardwareId == hardwareId)\r\n}\r\nexport const selectIssuesByCategoryAndName = (state, hardwareId, categoryName) => {\r\n  const allByCategories = selectIssuesByCategoryName(state, categoryName)\r\n  return allByCategories.filter(issue => issue.hardwareId == hardwareId)\r\n}\r\nexport const selectIssuesByStatusOrByCategoryAndName = (\r\n  state,\r\n  status = false,\r\n  hardwareId = null,\r\n  categoryName = null\r\n) => {\r\n  hardwareId && categoryName\r\n    ? selectIssuesByCategoryAndName(state, hardwareId, categoryName)\r\n    : selectIssuesByStatus(state, status)\r\n}\r\nexport const selectIssueMessages = state => state.issueMessage.data\r\nexport const loadingIssueMessages = state => state.issueMessage.loading\r\nexport const issueMessagesErrors = state => state.issueMessage.error\r\nexport const selectSidebarCategories = state => {\r\n  return state.issue.data.reduce((categories, el, index) => {\r\n    const category = categories[el.category.name]\r\n    let hardwares = []\r\n\r\n    if (!Array.isArray(category)) {\r\n      hardwares = [{ id: el.hardwareId, name: el.hardwareName }]\r\n    } else {\r\n      if (category.find(hardware => hardware.id === el.hardwareId)) {\r\n        return categories\r\n      }\r\n      hardwares = [...category, { id: el.hardwareId, name: el.hardwareName }]\r\n    }\r\n    return {\r\n      ...categories,\r\n      [el.category.name]: hardwares,\r\n    }\r\n  }, {})\r\n}\r\n",
    "import React from \"react\"\nimport styles from \"./Loading.module.css\"\n\nexport const RectLoading = () => {\n  return (\n    <div className={styles.spinner}>\n      <div></div>\n      <div className={styles.rect2}></div>\n      <div className={styles.rect3}></div>\n      <div className={styles.rect4}></div>\n      <div className={styles.rect5}></div>\n    </div>\n  )\n}\n",
    "import { http } from \"@utils/http\"\r\n\r\nexport const getIssues = async () => {\r\n  return await http({\r\n    url: \"/api/issue\",\r\n    method: \"GET\",\r\n  })\r\n}\r\n\r\nexport const addIssue = async body => {\r\n  return await http({\r\n    url: \"/api/issue\",\r\n    method: \"POST\",\r\n    data: body,\r\n  })\r\n}\r\n\r\nexport const changeIssueStatus = async (id, body) => {\r\n  return await http({\r\n    url: `/api/issue/${id}`,\r\n    method: \"PUT\",\r\n    data: body,\r\n  })\r\n}\r\n\r\nexport const removeIssue = async id => {\r\n  return await http({\r\n    url: `/api/issue/${id}`,\r\n    method: \"DELETE\",\r\n  })\r\n}\r\n\r\nexport const getIssueMessages = async id => {\r\n  return await http({\r\n    url: `/api/issue/${id}/message`,\r\n    method: \"GET\",\r\n  })\r\n}\r\n\r\nexport const addIssueMessage = async (id, body) => {\r\n  return await http({\r\n    url: `/api/issue/${id}/message`,\r\n    method: \"POST\",\r\n    data: body,\r\n  })\r\n}\r\n",
    "import { issues } from \"@actions/actionTypes\"\nimport * as issueService from \"@services/issue\"\n\nexport const getIssues = () => async dispatch => {\n  dispatch({ type: issues.GET_ISSUES_REQUEST })\n  try {\n    const data = await issueService.getIssues()\n    dispatch({\n      type: issues.GET_ISSUES_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: issues.GET_ISSUES_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const addIssue = body => async dispatch => {\n  try {\n    const data = await issueService.addIssue(body)\n    dispatch({\n      type: issues.ADD_ISSUE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: issues.ADD_ISSUE_FAILURE,\n      payload: error,\n    })\n    throw error\n  }\n}\n\nexport const changeIssueStatus = (id, body) => async dispatch => {\n  try {\n    const data = await issueService.changeIssueStatus(id, body)\n    dispatch({\n      type: issues.CHANGE_STATUS_SUCCESS,\n      payload: { data, id },\n    })\n  } catch (error) {\n    dispatch({\n      type: issues.CHANGE_STATUS_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const getIssueMessages = id => async dispatch => {\n  dispatch({ type: issues.GET_MESSAGES_REQUEST })\n  try {\n    const data = await issueService.getIssueMessages(id)\n    dispatch({\n      type: issues.GET_MESSAGES_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: issues.GET_MESSAGES_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const addIssueMessage = (id, body) => async dispatch => {\n  try {\n    const data = await issueService.addIssueMessage(id, body)\n    dispatch({\n      type: issues.ADD_MESSAGE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: issues.ADD_MESSAGE_FAILURE,\n      payload: error,\n    })\n    throw error\n  }\n}\n\nexport const resetIssueErrors = () => dispatch => {\n  dispatch({\n    type: issues.RESET_ERRORS_SUCCESS,\n  })\n}\n",
    "// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Loading_spinner__7liJt\",\"ms-stretchdelay\":\"Loading_ms-stretchdelay__1MGkv\",\"rect2\":\"Loading_rect2__cutuo\",\"rect3\":\"Loading_rect3__28rOG\",\"rect4\":\"Loading_rect4__2DiIa\",\"rect5\":\"Loading_rect5__2Ui2-\"};",
    "export const calibrations = [\"1 Year\", \"2 Years\", \"3 Years\", \"4 Years\", \"5 Years\"]\nexport const issueStatus = [\n  { id: 1, name: \"Open\" },\n  { id: 2, name: \"Close\" },\n]\nexport const issueCategory = [\n  { id: 1, name: \"Hardware\" },\n  { id: 2, name: \"Kit\" },\n]\n",
    "import React, { Component } from \"react\"\nimport { Button, Modal, ModalFooter, Form, ModalBody } from \"react-bootstrap\"\nimport { TextField } from \"@components/shared/Fields/TextField\"\nimport { resetIssueErrors } from \"@actions/issue\"\nimport { issueErrors } from \"@selectors/issue\"\nimport { connect } from \"react-redux\"\nimport { TextareaField } from \"@components/shared/Fields/TextareaField\"\nimport { CheckboxField } from \"@components/shared/Fields/CheckboxField\"\nimport { FaShareAlt } from \"react-icons/fa\"\n\nclass CreateIssue extends Component {\n  componentWillUnmount() {\n    this.props.resetIssueErrors()\n  }\n  render() {\n    const { toggleIssue, consultants, addIssue, onChange, isFaulty, errors, categoryName } = this.props\n    return (\n      <Modal show={toggleIssue} onHide={() => toggleIssue(null)} size=\"lg\" centered>\n        <Form noValidate onSubmit={addIssue}>\n          <Modal.Header className=\"bg-primary\" closeButton>\n            <h5 className=\"modal-title has-icon text-white\">\n              <FaShareAlt />\n              Create issue\n            </h5>\n          </Modal.Header>\n          <ModalBody>\n            <TextField\n              label=\"To:\"\n              placeholder={consultants\n                .filter(consultant => {\n                  return consultant.role.name === \"Technical manager\"\n                })\n                .map(({ firstName, lastName }) => `${firstName} ${lastName}`)}\n              disabled\n            />\n            <TextField\n              name=\"title\"\n              label=\"Title\"\n              placeholder=\"Title of issue\"\n              onChange={onChange}\n              error={errors && errors.data.title}\n            />\n            <TextareaField\n              name=\"message\"\n              label=\"Describe your issue\"\n              onChange={onChange}\n              error={errors && errors.data.message}\n            />\n            {categoryName === \"Kit\" && (\n              <CheckboxField name=\"isFaulty\" value={isFaulty} label=\"Item is is faulty\" onChange={onChange} />\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button variant=\"secondary\" className=\"swal2-styled btn-light\" onClick={() => toggleIssue(null)}>\n              Cancel\n            </Button>\n            <Button variant=\"primary\" type=\"submit\" className=\"swal2-confirm swal2-styled\">\n              Add\n            </Button>\n          </ModalFooter>\n        </Form>\n      </Modal>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  errors: issueErrors(state),\n})\n\nexport default connect(mapStateToProps, { resetIssueErrors })(CreateIssue)\n",
    "import React from \"react\"\nimport { Button, FormGroup, FormControl, FormLabel, Modal, ModalFooter, Form, ModalBody } from \"react-bootstrap\"\nimport { TextField } from \"@components/shared/Fields/TextField\"\nimport { TextareaField } from \"@components/shared/Fields/TextareaField\"\nimport { FaShareAlt } from \"react-icons/fa\"\nimport PropTypes from \"prop-types\"\n\nexport const CreateMessage = ({ toggleMessage, consultants, addMessage, onChange, error }) => {\n  return (\n    <Modal show={toggleMessage} onHide={() => toggleMessage(null)} size=\"lg\" centered>\n      <Form noValidate onSubmit={addMessage}>\n        <Modal.Header className=\"bg-primary\" closeButton>\n          <h5 className=\"modal-title has-icon text-white\">\n            <FaShareAlt />\n            Reply Message:\n          </h5>\n        </Modal.Header>\n        <ModalBody>\n          <FormGroup>\n            <FormLabel>Cc: (Optional)</FormLabel>\n            <FormControl as=\"select\" multiple name=\"consultants\" onChange={onChange}>\n              {consultants.map(({ id, lastName, firstName }) => (\n                <option key={id} value={id}>\n                  {firstName} {lastName}\n                </option>\n              ))}\n            </FormControl>\n          </FormGroup>\n          <TextField\n            name=\"title\"\n            label=\"Title\"\n            placeholder=\"Title of message\"\n            onChange={onChange}\n            error={error && error.data.title}\n          />\n          <TextareaField name=\"message\" label=\"Message\" onChange={onChange} error={error && error.data.message} />\n        </ModalBody>\n        <ModalFooter>\n          <Button variant=\"secondary\" onClick={() => toggleMessage(null)}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" type=\"submit\" type=\"submit\">\n            Send Message\n          </Button>\n        </ModalFooter>\n      </Form>\n    </Modal>\n  )\n}\n\nCreateMessage.propTypes = {\n  consultants: PropTypes.object,\n  errors: PropTypes.object,\n}\n",
    "import React, { Component } from \"react\"\nimport moment from \"moment\"\nimport { FaReply } from \"react-icons/fa\"\nimport { Button } from \"react-bootstrap\"\nimport { connect } from \"react-redux\"\nimport { getIssueMessages, addIssueMessage } from \"@actions/issue\"\nimport { getConsultants } from \"@actions/consultant\"\nimport { selectConsultants, selectConsultantsManagers } from \"@selectors/consultant\"\nimport { selectAuthorizationId } from \"@selectors/authorization\"\nimport { loadingIssueMessages, issueMessagesErrors, selectIssueMessages } from \"@selectors/issue\"\nimport { CreateMessage } from \"@components/Dashboard/Issues/CreateMessage\"\nimport { RectLoading } from \"@components/shared/RectLoading\"\n\nclass Messages extends Component {\n  state = {\n    createMessage: null,\n    consultants: [],\n  }\n\n  componentDidMount() {\n    this.props.getIssueMessages(this.props.issueId)\n    this.props.getConsultants()\n  }\n\n  onChange = e => {\n    if (e.target.name == \"consultants\") {\n      this.setState({ consultants: Array.from(e.target.selectedOptions, option => parseInt(option.value)) })\n    } else {\n      this.setState({ [e.target.name]: e.target.value })\n    }\n  }\n\n  toggleMessage = createMessage => {\n    this.setState({ createMessage })\n  }\n\n  addMessage = async e => {\n    e.preventDefault()\n    const { addIssueMessage, consultantId, issueId, consultantsManagers } = this.props\n    const { title, message, consultants } = this.state\n\n    try {\n      await addIssueMessage(issueId, {\n        fromConsultantId: consultantId,\n        title,\n        message,\n        statusId: 1,\n        consultants: [...new Set([...consultantsManagers, ...consultants])],\n      })\n\n      this.setState({\n        createMessage: null,\n      })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  render() {\n    const { messages, issueId, consultants, loading, error } = this.props\n    const { createMessage } = this.state\n\n    if (loading) return <RectLoading />\n    return (\n      <>\n        <div className=\"justify-content-end row\">\n          <ul className=\"ms-scrollable ps ps--active-y col-9\">\n            {messages.length\n              ? messages.map(({ title, createdAt, message, fromConsultant: { firstName, lastName } }) => {\n                  return (\n                    <li className=\"media ms-email clearfix mb-1\">\n                      <div className=\"ms-email-img mr-3 \">\n                        <div className=\"ms-img-round-small\"></div>\n                      </div>\n                      <div className=\"media-body ms-email-details\">\n                        <h6 className=\"ms-email-subject\">\n                          {title} &nbsp; [&nbsp;\n                          <strong>\n                            {firstName} {lastName}\n                          </strong>\n                          &nbsp;]\n                        </h6>\n                        <span className=\"ms-email-time\">{moment(createdAt).format(\"LLL\")}</span>\n                        <p className=\"ms-email-msg\">{message}</p>\n                      </div>\n                    </li>\n                  )\n                })\n              : null}\n          </ul>\n          <div className=\"col-12\">\n            <Button className=\"add-issue mt-2\" onClick={() => this.toggleMessage(issueId)}>\n              <FaReply />\n            </Button>\n            {createMessage && (\n              <CreateMessage\n                toggleMessage={this.toggleMessage}\n                consultants={consultants}\n                addMessage={this.addMessage}\n                onChange={this.onChange}\n                error={error}\n              />\n            )}\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state, props) => ({\n  loading: loadingIssueMessages(state),\n  error: issueMessagesErrors(state),\n  messages: selectIssueMessages(state, props.issueId),\n  consultants: selectConsultants(state),\n  consultantsManagers: selectConsultantsManagers(state),\n  consultantId: selectAuthorizationId(state),\n})\n\nexport default connect(mapStateToProps, { getConsultants, getIssueMessages, addIssueMessage })(Messages)\n",
    "import React, { Component } from \"react\"\nimport moment from \"moment\"\nimport { Dropdown, DropdownItem } from \"react-bootstrap\"\nimport { FaEllipsisV } from \"react-icons/fa\"\nimport { issueStatus } from \"@data\"\nimport Messages from \"@components/Dashboard/Inventory/Issues/Messages\"\n\nclass IssuesList extends Component {\n  state = {\n    issueId: null,\n  }\n\n  showMessages = issueId => {\n    this.setState({ issueId })\n  }\n\n  render() {\n    const {\n      changeIssueStatus,\n      issue: {\n        consultant: { firstName, lastName },\n      },\n      issue,\n      roleName,\n    } = this.props\n    const { issueId } = this.state\n    const status = issue.status.id === 1 ? issueStatus[1] : issueStatus[0]\n    return (\n      <li className=\"one-issue\">\n        <div className=\"media ms-email clearfix\" onClick={() => this.showMessages(issue.id)}>\n          <div className=\"ms-email-img mr-3 \">\n            <div className=\"ms-img-round\">\n              {firstName.charAt(0)} {lastName.charAt(0)}\n            </div>\n          </div>\n          <div className=\"media-body ms-email-details\">\n            <h6 className=\"ms-email-sender\">\n              {issue.title} &nbsp;\n              <i>\n                {firstName} {lastName}\n              </i>\n              <span className=\"ms-email-time\">{moment(issue.createdAt).format(\"LLL\")}</span>\n            </h6>\n            <p className=\"ms-email-msg\">{issue.message}</p>\n          </div>\n        </div>\n        {(roleName === \"admin\" || roleName === \"technical-manager\") && (\n          <Dropdown className=\"closeIssue\">\n            <Dropdown.Toggle>\n              <FaEllipsisV />\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              <DropdownItem onClick={() => changeIssueStatus(issue.id, { statusId: status.id })}>\n                {status.name}\n              </DropdownItem>\n            </Dropdown.Menu>\n          </Dropdown>\n        )}\n        {issueId && <Messages issueId={issueId} />}\n      </li>\n    )\n  }\n}\n\nexport default IssuesList\n",
    "import React, { Component } from \"react\"\nimport IssuesList from \"@components/Dashboard/Inventory/Issues/IssuesList\"\nimport { Button, Row, Col } from \"react-bootstrap\"\nimport { FaChevronLeft, FaChevronRight } from \"react-icons/fa\"\n\nclass FilteredIssues extends Component {\n  state = {\n    currentPage: 1,\n  }\n\n  pageSwitcher = value => {\n    if (value === \"next\") {\n      this.setState({ currentPage: this.state.currentPage + 1 })\n    } else {\n      this.setState({ currentPage: this.state.currentPage - 1 })\n    }\n  }\n\n  render() {\n    const { inventoryId, issues } = this.props\n    const { currentPage } = this.state\n    const lastItem = currentPage * 10\n    const firstItem = lastItem - 10\n\n    let formatedIssues = []\n    formatedIssues =\n      issues.length && issues.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).slice(firstItem, lastItem)\n    const renderPageNumbers = () => {\n      return (\n        <Row className=\"pagination issues\">\n          <Col>\n            <div className=\"arrows d-flex justify-content-end\">\n              <Button onClick={() => this.pageSwitcher(\"prev\")} disabled={firstItem === 0}>\n                <FaChevronLeft />\n              </Button>\n              <Button onClick={() => this.pageSwitcher(\"next\")} disabled={lastItem >= issues.length}>\n                <FaChevronRight />\n              </Button>\n            </div>\n          </Col>\n        </Row>\n      )\n    }\n\n    return (\n      <>\n        {formatedIssues.length ? (\n          <>\n            <ul className=\"ms-scrollable ps ps--active-y\">\n              {formatedIssues.map(issue => (\n                <IssuesList issue={issue} {...this.props} />\n              ))}\n            </ul>\n            {renderPageNumbers()}\n          </>\n        ) : (\n          <div className=\"media ms-email clearfix\">\n            <div className=\"media-body ms-email-details\">\n              <p className=\"ms-email-msg\">No issues...</p>\n            </div>\n          </div>\n        )}\n      </>\n    )\n  }\n}\n\nexport default FilteredIssues\n",
    "import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport { FaPlus } from \"react-icons/fa\"\nimport { getIssues, addIssue, changeIssueStatus } from \"@actions/issue\"\nimport { updateKit, updateHardware } from \"@actions/inventory\"\nimport { getConsultants } from \"@actions/consultant\"\nimport { selectConsultants } from \"@selectors/consultant\"\nimport { selectIssuesByCategoryAndId, loadingIssues } from \"@selectors/issue\"\nimport { selectRoleAuthorization, selectAuthorizationId } from \"@selectors/authorization\"\nimport CreateIssue from \"@components/Dashboard/Issues/CreateIssue\"\nimport FilteredIssues from \"@components/Dashboard/Inventory/Issues/FilteredIssues\"\nimport { Button } from \"react-bootstrap\"\nimport { RectLoading } from \"@components/shared/RectLoading\"\nimport PropTypes from \"prop-types\"\nimport styles from \"./Issues.module.css\"\n\nclass InventoryIssues extends Component {\n  state = {\n    isFaulty: false,\n    createIssue: null,\n    status: \"Open\",\n  }\n\n  componentDidMount() {\n    this.props.getIssues()\n    this.props.getConsultants()\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n    if (e.target.type === \"checkbox\") {\n      if (e.target.checked) {\n        this.setState({ isFaulty: true })\n      } else {\n        this.setState({ isFaulty: false })\n      }\n    }\n  }\n\n  toggleIssue = createIssue => {\n    this.setState({ createIssue })\n  }\n\n  changeStatus = status => {\n    this.setState({ status })\n  }\n\n  addIssue = async e => {\n    e.preventDefault()\n    const { addIssue, consultantId, inventory, updateKit, category } = this.props\n    const { title, message, isFaulty } = this.state\n\n    try {\n      await addIssue({\n        consultantId,\n        hardwareId: inventory.id,\n        hardwareName: inventory.name,\n        statusId: 1,\n        categoryId: category.id,\n        title,\n        message,\n      })\n      category.name === \"Kit\" && updateKit(inventory.id, { isFaulty })\n\n      this.setState({\n        createIssue: null,\n      })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  render() {\n    const {\n      inventory,\n      consultants,\n      issuesByCatAndId,\n      roleName,\n      addViewIssue,\n      loading,\n      category,\n      resetIssueErrors,\n    } = this.props\n    const { isFaulty, createIssue, status } = this.state\n    const issues = issuesByCatAndId.filter(item => item.status.name === status)\n\n    if (loading) return <RectLoading />\n\n    return (\n      <>\n        <div className=\"ms-email-content\">\n          <ul class=\"nav nav-tabs d-flex mb-4 justify-content-center\">\n            {(roleName === \"admin\" || roleName === \"technical-manager\") && issuesByCatAndId.length ? (\n              <>\n                <li>\n                  <Button className={styles.open} onClick={() => this.changeStatus(\"Open\")}>\n                    Open\n                  </Button>\n                </li>\n                <li>\n                  <Button className={styles.closed} onClick={() => this.changeStatus(\"Closed\")}>\n                    Closed\n                  </Button>\n                </li>\n              </>\n            ) : null}\n          </ul>\n          <Button className=\"swal2-close\" onClick={() => addViewIssue(null)}>\n            ×\n          </Button>\n          <FilteredIssues {...this.props} issues={issues} />\n        </div>\n        <Button className=\"float-right add-issue\" onClick={() => this.toggleIssue(inventory.id)}>\n          <FaPlus />\n        </Button>\n        {createIssue && (\n          <CreateIssue\n            toggleIssue={this.toggleIssue}\n            consultants={consultants}\n            addIssue={this.addIssue}\n            onChange={this.onChange}\n            isFaulty={isFaulty}\n            resetIssueErrors={resetIssueErrors}\n            categoryName={category.name}\n          />\n        )}\n      </>\n    )\n  }\n}\n\nInventoryIssues.propTypes = {\n  isFaulty: PropTypes.bool.isRequired,\n  loading: PropTypes.bool.isRequired,\n  createIssue: PropTypes.number.isRequired,\n  inventory: PropTypes.object.isRequired,\n  status: PropTypes.string.isRequired,\n  category: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  message: PropTypes.string.isRequired,\n  updateKit: PropTypes.func.isRequired,\n  updateHardware: PropTypes.func.isRequired,\n  toggleIssue: PropTypes.func.isRequired,\n  addIssue: PropTypes.func.isRequired,\n  getConsultants: PropTypes.func.isRequired,\n  getIssues: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state, props) => ({\n  roleName: selectRoleAuthorization(state),\n  loading: loadingIssues(state),\n  consultants: selectConsultants(state),\n  consultantId: selectAuthorizationId(state),\n  issuesByCatAndId: selectIssuesByCategoryAndId(state, props.inventory.id, props.category.id),\n})\n\nexport default connect(mapStateToProps, {\n  getConsultants,\n  getIssues,\n  updateKit,\n  updateHardware,\n  addIssue,\n  changeIssueStatus,\n})(InventoryIssues)\n",
    "// extracted by mini-css-extract-plugin\nmodule.exports = {\"open\":\"Issues_open__AgSsl\",\"closed\":\"Issues_closed__2kboY\"};"
  ],
  "sourceRoot": ""
}
