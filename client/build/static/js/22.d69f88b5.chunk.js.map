{
  "version": 3,
  "sources": [
    "components/Dashboard/Inventory/Type/TypeForm.js",
    "components/Dashboard/Inventory/Type/index.js"
  ],
  "names": [
    "TypeForm",
    "state",
    "name",
    "onChange",
    "e",
    "setState",
    "target",
    "value",
    "onSubmit",
    "a",
    "preventDefault",
    "addType",
    "props",
    "this",
    "resetTypeErrors",
    "error",
    "Form",
    "noValidate",
    "TextField",
    "label",
    "placeholder",
    "data",
    "Row",
    "Col",
    "Button",
    "variant",
    "type",
    "className",
    "Component",
    "Type",
    "isModalOpen",
    "toggleModal",
    "getTypes",
    "loading",
    "types",
    "removeType",
    "Loading",
    "length",
    "Dashboard",
    "Table",
    "striped",
    "bordered",
    "hover",
    "map",
    "id",
    "key",
    "onClick",
    "ModalDelete",
    "hideModal",
    "deleteState",
    "lg",
    "connect",
    "selectTypes",
    "loadingTypes",
    "typeErrors"
  ],
  "mappings": "0QAKaA,EAAb,4MACEC,MAAQ,CACNC,KAAM,IAFV,EAKEC,SAAW,SAAAC,GACT,EAAKC,SAAL,eAAiBD,EAAEE,OAAOJ,KAAOE,EAAEE,OAAOC,SAN9C,EAaEC,SAbF,uCAaa,WAAMJ,GAAN,iBAAAK,EAAA,6DACTL,EAAEM,iBACMC,EAAY,EAAKC,MAAjBD,QACAT,EAAS,EAAKD,MAAdC,KAHC,SAIHS,EAAQ,CAAET,SAJP,OAKT,EAAKG,SAAS,CAAEH,KAAM,KALb,2CAbb,2HAUIW,KAAKD,MAAME,oBAVf,+BAqBY,IACAZ,EAASW,KAAKZ,MAAdC,KACAa,EAAUF,KAAKD,MAAfG,MAER,OACE,kBAACC,EAAA,EAAD,CAAMC,YAAU,EAACT,SAAUK,KAAKL,UAC9B,kBAACU,EAAA,EAAD,CACEhB,KAAK,OACLK,MAAOL,EACPiB,MAAM,OACNC,YAAY,iBACZjB,SAAUU,KAAKV,SACfY,MAAOA,GAASA,EAAMM,KAAKnB,OAE7B,kBAACoB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,SAASC,UAAU,oBAAlD,cArCZ,GAA8BC,a,0BCMxBC,E,4MACJ5B,MAAQ,CACN6B,YAAa,M,EAOfC,YAAc,SAAAD,GACZ,EAAKzB,SAAS,CAAEyB,iB,kEAJhBjB,KAAKD,MAAMoB,a,+BAOH,IAAD,SACgCnB,KAAKD,MAApCqB,EADD,EACCA,QAASC,EADV,EACUA,MAAOC,EADjB,EACiBA,WAChBL,EAAgBjB,KAAKZ,MAArB6B,YAER,OAAIG,EAAgB,kBAACG,EAAA,EAAD,MACfF,EAAMG,OAET,kBAACC,EAAA,EAAD,KACE,yBAAKX,UAAU,YACb,yBAAKA,UAAU,mBACb,sCAEF,yBAAKA,UAAU,iBACb,kBAACY,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,oCACA,yCAGJ,+BACGR,EAAMS,KAAI,gBAAGC,EAAH,EAAGA,GAAI1C,EAAP,EAAOA,KAAP,OACT,wBAAI2C,IAAKD,GACP,4BAAK1C,GACL,4BACE,kBAACsB,EAAA,EAAD,CACEoB,GAAIA,EACJnB,QAAQ,UACRqB,QAAS,WACP,EAAKf,YAAYa,KAJrB,eASA,kBAACG,EAAA,EAAD,CACEH,GAAIA,EACJI,UAAW,EAAKjB,YAChBD,YAAaA,EACbmB,YAAa,kBAAMd,EAAWS,eAS9C,kBAACtB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAK2B,GAAG,KACN,yBAAKvB,UAAU,YACb,yBAAKA,UAAU,mBACb,yCAEF,yBAAKA,UAAU,iBACb,kBAAC,EAAad,KAAKD,YAjDL,S,GAlBXgB,aA4FJuB,uBANS,SAAAlD,GAAK,MAAK,CAChCiC,MAAOkB,YAAUnD,GACjBgC,QAASoB,YAAapD,GACtBc,MAAOuC,YAAWrD,MAGoB,CAAE+B,aAAUG,eAAYxB,YAASG,qBAA1DqC,CAA6EtB",
  "file": "static/js/22.d69f88b5.chunk.js",
  "sourcesContent": [
    "import React, { Component } from \"react\"\nimport { Button, Form, Col, Row } from \"react-bootstrap\"\nimport { TextField } from \"@components/shared/Fields/TextField\"\nimport PropTypes from \"prop-types\"\n\nexport class TypeForm extends Component {\n  state = {\n    name: \"\",\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  componentWillUnmount() {\n    this.props.resetTypeErrors()\n  }\n\n  onSubmit = async e => {\n    e.preventDefault()\n    const { addType } = this.props\n    const { name } = this.state\n    await addType({ name })\n    this.setState({ name: \"\" })\n  }\n\n  render() {\n    const { name } = this.state\n    const { error } = this.props\n\n    return (\n      <Form noValidate onSubmit={this.onSubmit}>\n        <TextField\n          name=\"name\"\n          value={name}\n          label=\"Name\"\n          placeholder=\"Ex: Calibrator\"\n          onChange={this.onChange}\n          error={error && error.data.name}\n        />\n        <Row>\n          <Col>\n            <Button variant=\"primary\" type=\"submit\" className=\"w-25 float-right\">\n              Add\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    )\n  }\n}\n\nTypeForm.propTypes = {\n  name: PropTypes.string.isRequired,\n}\n",
    "import React, { Component } from \"react\"\nimport { Row, Col, Table, Button } from \"react-bootstrap\"\nimport { connect } from \"react-redux\"\nimport { removeType, getTypes, addType, resetTypeErrors } from \"@actions/inventory\"\nimport { selectTypes, loadingTypes, typeErrors } from \"@selectors/inventory\"\nimport { TypeForm } from \"@components/Dashboard/Inventory/Type/TypeForm\"\nimport { Dashboard } from \"@components/Dashboard\"\nimport { ModalDelete } from \"@components/shared/ModalDelete\"\nimport { Loading } from \"@components/shared/Loading\"\nimport PropTypes from \"prop-types\"\n\nclass Type extends Component {\n  state = {\n    isModalOpen: null,\n  }\n\n  componentDidMount() {\n    this.props.getTypes()\n  }\n\n  toggleModal = isModalOpen => {\n    this.setState({ isModalOpen })\n  }\n\n  render() {\n    const { loading, types, removeType } = this.props\n    const { isModalOpen } = this.state\n\n    if (loading) return <Loading />\n    if (!types.length) return null\n    return (\n      <Dashboard>\n        <div className=\"ms-panel\">\n          <div className=\"ms-panel-header\">\n            <h6>Types</h6>\n          </div>\n          <div className=\"ms-panel-body\">\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Delete?</th>\n                </tr>\n              </thead>\n              <tbody>\n                {types.map(({ id, name }) => (\n                  <tr key={id}>\n                    <td>{name}</td>\n                    <td>\n                      <Button\n                        id={id}\n                        variant=\"primary\"\n                        onClick={() => {\n                          this.toggleModal(id)\n                        }}\n                      >\n                        Delete Item\n                      </Button>\n                      <ModalDelete\n                        id={id}\n                        hideModal={this.toggleModal}\n                        isModalOpen={isModalOpen}\n                        deleteState={() => removeType(id)}\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </div>\n        </div>\n        <Row>\n          <Col lg=\"5\">\n            <div className=\"ms-panel\">\n              <div className=\"ms-panel-header\">\n                <h6>Add Type</h6>\n              </div>\n              <div className=\"ms-panel-body\">\n                <TypeForm {...this.props} />\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </Dashboard>\n    )\n  }\n}\n\nType.propTypes = {\n  isModalOpen: PropTypes.number.isRequired,\n  loading: PropTypes.bool.isRequired,\n  types: PropTypes.array.isRequired,\n  getTypes: PropTypes.func.isRequired,\n  removeType: PropTypes.func.isRequired,\n  addType: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  types: selectTypes(state),\n  loading: loadingTypes(state),\n  error: typeErrors(state),\n})\n\nexport default connect(mapStateToProps, { getTypes, removeType, addType, resetTypeErrors })(Type)\n"
  ],
  "sourceRoot": ""
}
