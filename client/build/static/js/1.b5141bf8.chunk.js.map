{
  "version": 3,
  "sources": [
    "components/shared/ModalDelete.js",
    "services/inventory.js",
    "actions/inventory.js",
    "selectors/inventory.js",
    "components/Dashboard/Inventory/KitAlert/index.js",
    "components/Dashboard/index.js"
  ],
  "names": [
    "ModalDelete",
    "id",
    "hideModal",
    "isModalOpen",
    "deleteState",
    "currentUser",
    "show",
    "onHide",
    "centered",
    "className",
    "variant",
    "onClick",
    "sendCalibrationNotification",
    "body",
    "a",
    "http",
    "url",
    "method",
    "data",
    "getTypes",
    "addType",
    "removeType",
    "getManufactures",
    "addManufacture",
    "removeManufacture",
    "getModels",
    "addModel",
    "removeModel",
    "getHardwares",
    "addHardware",
    "updateHardware",
    "removeHardware",
    "getKits",
    "addKit",
    "updateKit",
    "removeKit",
    "dispatch",
    "inventoryService",
    "type",
    "calibration",
    "SEND_NOTIFICATION_SUCCESS",
    "SEND_NOTIFICATION_FAILURE",
    "payload",
    "types",
    "GET_TYPES_REQUEST",
    "GET_TYPES_SUCCESS",
    "GET_TYPES_FAILURE",
    "name",
    "ADD_TYPE_SUCCESS",
    "ADD_TYPE_FAILURE",
    "REMOVE_TYPE_SUCCESS",
    "REMOVE_TYPE_FAILURE",
    "manufactures",
    "GET_MANUFACTURES_REQUEST",
    "GET_MANUFACTURES_SUCCESS",
    "GET_MANUFACTURES_FAILURE",
    "ADD_MANUFACTURE_SUCCESS",
    "ADD_MANUFACTURE_FAILURE",
    "REMOVE_MANUFACTURE_SUCCESS",
    "REMOVE_MANUFACTURE_FAILURE",
    "models",
    "GET_MODELS_REQUEST",
    "GET_MODELS_SUCCESS",
    "GET_MODELS_FAILURE",
    "ADD_MODEL_SUCCESS",
    "ADD_MODEL_FAILURE",
    "REMOVE_MODEL_SUCCESS",
    "REMOVE_MODEL_FAILURE",
    "hardwares",
    "GET_HARDWARES_REQUEST",
    "GET_HARDWARES_SUCCESS",
    "GET_HARDWARES_FAILURE",
    "ADD_HARDWARE_SUCCESS",
    "ADD_HARDWARE_FAILURE",
    "UPDATE_HARDWARE_SUCCESS",
    "UPDATE_HARDWARE_FAILURE",
    "REMOVE_HARDWARE_SUCCESS",
    "REMOVE_HARDWARE_FAILURE",
    "kits",
    "GET_KITS_REQUEST",
    "GET_KITS_SUCCESS",
    "GET_KITS_FAILURE",
    "ADD_KIT_SUCCESS",
    "ADD_KIT_FAILURE",
    "UPDATE_KIT_SUCCESS",
    "UPDATE_KIT_FAILURE",
    "REMOVE_KIT_SUCCESS",
    "REMOVE_KIT_FAILURE",
    "resetManufactureErrors",
    "RESET_ERRORS_SUCCESS",
    "resetModelErrors",
    "resetTypeErrors",
    "selectTypes",
    "state",
    "inventoryType",
    "loadingTypes",
    "loading",
    "typeErrors",
    "error",
    "selectManufactures",
    "inventoryManufacture",
    "loadingManufactures",
    "manufactureErrors",
    "selectModels",
    "inventoryModel",
    "loadingModels",
    "modelErrors",
    "selectKits",
    "inventoryKit",
    "kitErrors",
    "selectHardwares",
    "inventoryHardware",
    "loadingHardwares",
    "hardwareErrors",
    "KitAlert",
    "newDate",
    "Date",
    "this",
    "props",
    "kitsAr",
    "filter",
    "x",
    "toDays",
    "calibrationDueDate",
    "length",
    "Row",
    "Col",
    "map",
    "item",
    "join",
    "Component",
    "connect",
    "Dashboard",
    "children",
    "Sidebar",
    "lg"
  ],
  "mappings": "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",
  "file": "static/js/1.b5141bf8.chunk.js",
  "sourcesContent": [
    "import React from \"react\"\nimport { Button, Modal, ModalBody } from \"react-bootstrap\"\n\nexport const ModalDelete = ({ id, hideModal, isModalOpen, deleteState, currentUser }) => {\n  return (\n    <Modal show={isModalOpen === id} onHide={hideModal} centered>\n      <ModalBody className=\"swal2-header\">\n        <div className=\"swal2-icon swal2-warning swal2-animate-warning-icon\">\n          <span className=\"swal2-icon-text\">!</span>\n        </div>\n        <h2 className=\"swal2-title\" id=\"swal2-title\">\n          {currentUser === id ? \"You cannot Delete yourself\" : \"Are you sure?\"}\n        </h2>\n        {currentUser !== id && <div id=\"swal2-content\">You won't be able to revert this!</div>}\n        <div className=\"swal2-actions\">\n          {currentUser !== id && (\n            <Button variant=\"primary\" className=\"swal2-confirm swal2-styled\" onClick={deleteState}>\n              Yes, delete it!\n            </Button>\n          )}\n          <Button variant=\"secondary\" className=\"swal2-cancel swal2-styled\" onClick={() => hideModal(null)}>\n            Cancel\n          </Button>\n        </div>\n      </ModalBody>\n    </Modal>\n  )\n}\n",
    "import { http } from \"@utils/http\"\n\nexport const sendCalibrationNotification = async body => {\n  return await http({\n    url: \"/api/calibrationNotification\",\n    method: \"POST\",\n    data: body,\n  })\n}\n\nexport const getTypes = async () => {\n  return await http({\n    url: \"/api/inventory/type\",\n    method: \"GET\",\n  })\n}\n\nexport const addType = async body => {\n  return await http({\n    url: \"/api/inventory/type\",\n    method: \"POST\",\n    data: body,\n  })\n}\n\nexport const removeType = async id => {\n  return await http({\n    url: `/api/inventory/type/${id}`,\n    method: \"DELETE\",\n  })\n}\n\nexport const getManufactures = async () => {\n  return await http({\n    url: \"/api/inventory/manufacture\",\n    method: \"GET\",\n  })\n}\n\nexport const addManufacture = async body => {\n  const data = await http({\n    url: \"/api/inventory/manufacture\",\n    method: \"POST\",\n    data: body,\n  })\n  return data\n}\n\nexport const removeManufacture = async id => {\n  const data = await http({\n    url: `/api/inventory/manufacture/${id}`,\n    method: \"DELETE\",\n  })\n  return data\n}\n\nexport const getModels = async () => {\n  return await http({\n    url: \"/api/inventory/model\",\n    method: \"GET\",\n  })\n}\n\nexport const addModel = async body => {\n  const data = await http({\n    url: \"/api/inventory/model\",\n    method: \"POST\",\n    data: body,\n  })\n  return data\n}\n\nexport const removeModel = async id => {\n  const data = await http({\n    url: `/api/inventory/model/${id}`,\n    method: \"DELETE\",\n  })\n  return data\n}\n\nexport const getHardwares = async () => {\n  return await http({\n    url: \"/api/inventory/hardware\",\n    method: \"GET\",\n  })\n}\n\nexport const addHardware = async body => {\n  return await http({\n    url: \"/api/inventory/hardware\",\n    method: \"POST\",\n    data: body,\n  })\n}\n\nexport const updateHardware = async (id, body) => {\n  return await http({\n    url: `/api/inventory/hardware/${id}`,\n    method: \"PUT\",\n    data: body,\n  })\n}\n\nexport const removeHardware = async id => {\n  return await http({\n    url: `/api/inventory/hardware/${id}`,\n    method: \"DELETE\",\n  })\n}\n\nexport const getKits = async () => {\n  return await http({\n    url: \"/api/inventory/kit\",\n    method: \"GET\",\n  })\n}\n\nexport const addKit = async body => {\n  return await http({\n    url: \"/api/inventory/kit\",\n    method: \"POST\",\n    data: body,\n  })\n}\n\nexport const updateKit = async (id, body) => {\n  return await http({\n    url: `/api/inventory/kit/${id}`,\n    method: \"PUT\",\n    data: body,\n  })\n}\n\nexport const removeKit = async id => {\n  return await http({\n    url: `/api/inventory/kit/${id}`,\n    method: \"DELETE\",\n  })\n}\n",
    "import { calibration, types, manufactures, kits, hardwares, models } from \"@actions/actionTypes\"\nimport * as inventoryService from \"@services/inventory\"\n\nexport const sendCalibrationNotification = body => async dispatch => {\n  try {\n    await inventoryService.sendCalibrationNotification(body)\n    dispatch({\n      type: calibration.SEND_NOTIFICATION_SUCCESS,\n    })\n  } catch (error) {\n    dispatch({\n      type: calibration.SEND_NOTIFICATION_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const getTypes = () => async dispatch => {\n  dispatch({ type: types.GET_TYPES_REQUEST })\n  try {\n    const data = await inventoryService.getTypes()\n    dispatch({\n      type: types.GET_TYPES_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: types.GET_TYPES_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const addType = name => async dispatch => {\n  try {\n    const data = await inventoryService.addType(name)\n    dispatch({\n      type: types.ADD_TYPE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: types.ADD_TYPE_FAILURE,\n      payload: error,\n    })\n    throw error\n  }\n}\n\nexport const removeType = id => async dispatch => {\n  try {\n    await inventoryService.removeType(id)\n    dispatch({\n      type: types.REMOVE_TYPE_SUCCESS,\n      payload: id,\n    })\n  } catch (error) {\n    dispatch({\n      type: types.REMOVE_TYPE_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const getManufactures = () => async dispatch => {\n  dispatch({ type: manufactures.GET_MANUFACTURES_REQUEST })\n  try {\n    const data = await inventoryService.getManufactures()\n    dispatch({\n      type: manufactures.GET_MANUFACTURES_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: manufactures.GET_MANUFACTURES_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const addManufacture = name => async dispatch => {\n  try {\n    const data = await inventoryService.addManufacture(name)\n    dispatch({\n      type: manufactures.ADD_MANUFACTURE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: manufactures.ADD_MANUFACTURE_FAILURE,\n      payload: error,\n    })\n    throw error\n  }\n}\n\nexport const removeManufacture = id => async dispatch => {\n  try {\n    await inventoryService.removeManufacture(id)\n    dispatch({\n      type: manufactures.REMOVE_MANUFACTURE_SUCCESS,\n      payload: id,\n    })\n  } catch (error) {\n    dispatch({\n      type: manufactures.REMOVE_MANUFACTURE_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const getModels = () => async dispatch => {\n  dispatch({ type: models.GET_MODELS_REQUEST })\n  try {\n    const data = await inventoryService.getModels()\n    dispatch({\n      type: models.GET_MODELS_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: models.GET_MODELS_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const addModel = body => async dispatch => {\n  try {\n    const data = await inventoryService.addModel(body)\n    dispatch({\n      type: models.ADD_MODEL_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: models.ADD_MODEL_FAILURE,\n      payload: error,\n    })\n    throw error\n  }\n}\n\nexport const removeModel = id => async dispatch => {\n  try {\n    await inventoryService.removeModel(id)\n    dispatch({\n      type: models.REMOVE_MODEL_SUCCESS,\n      payload: id,\n    })\n  } catch (error) {\n    dispatch({\n      type: models.REMOVE_MODEL_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const getHardwares = () => async dispatch => {\n  dispatch({ type: hardwares.GET_HARDWARES_REQUEST })\n  try {\n    const data = await inventoryService.getHardwares()\n    dispatch({\n      type: hardwares.GET_HARDWARES_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: hardwares.GET_HARDWARES_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const addHardware = body => async dispatch => {\n  try {\n    const data = await inventoryService.addHardware(body)\n    dispatch({\n      type: hardwares.ADD_HARDWARE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: hardwares.ADD_HARDWARE_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const updateHardware = (id, body) => async dispatch => {\n  try {\n    const data = await inventoryService.updateHardware(id, body)\n    dispatch({\n      type: hardwares.UPDATE_HARDWARE_SUCCESS,\n      payload: { data, id },\n    })\n  } catch (error) {\n    dispatch({\n      type: hardwares.UPDATE_HARDWARE_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const removeHardware = id => async dispatch => {\n  try {\n    await inventoryService.removeHardware(id)\n    dispatch({\n      type: hardwares.REMOVE_HARDWARE_SUCCESS,\n      payload: id,\n    })\n  } catch (error) {\n    dispatch({\n      type: hardwares.REMOVE_HARDWARE_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const getKits = () => async dispatch => {\n  dispatch({ type: kits.GET_KITS_REQUEST })\n  try {\n    const data = await inventoryService.getKits()\n    dispatch({\n      type: kits.GET_KITS_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: kits.GET_KITS_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const addKit = body => async dispatch => {\n  try {\n    const data = await inventoryService.addKit(body)\n    dispatch({\n      type: kits.ADD_KIT_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: kits.ADD_KIT_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const updateKit = (id, body) => async dispatch => {\n  try {\n    const data = await inventoryService.updateKit(id, body)\n    dispatch({\n      type: kits.UPDATE_KIT_SUCCESS,\n      payload: { data, id },\n    })\n  } catch (error) {\n    dispatch({\n      type: kits.UPDATE_KIT_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const removeKit = id => async dispatch => {\n  try {\n    await inventoryService.removeKit(id)\n    dispatch({\n      type: kits.REMOVE_KIT_SUCCESS,\n      payload: id,\n    })\n  } catch (error) {\n    dispatch({\n      type: kits.REMOVE_KIT_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport const resetManufactureErrors = () => dispatch => {\n  dispatch({\n    type: manufactures.RESET_ERRORS_SUCCESS,\n  })\n}\n\nexport const resetModelErrors = () => dispatch => {\n  dispatch({\n    type: models.RESET_ERRORS_SUCCESS,\n  })\n}\n\nexport const resetTypeErrors = () => dispatch => {\n  dispatch({\n    type: types.RESET_ERRORS_SUCCESS,\n  })\n}\n\nexport const resetKitErrors = () => dispatch => {\n  dispatch({\n    type: kits.RESET_ERRORS_SUCCESS,\n  })\n}\n",
    "export const selectTypes = state => state.inventoryType.data\r\nexport const loadingTypes = state => state.inventoryType.loading\r\nexport const typeErrors = state => state.inventoryType.error\r\nexport const selectManufactures = state => state.inventoryManufacture.data\r\nexport const loadingManufactures = state => state.inventoryManufacture.loading\r\nexport const manufactureErrors = state => state.inventoryManufacture.error\r\nexport const selectModels = state => state.inventoryModel.data\r\nexport const loadingModels = state => state.inventoryModel.loading\r\nexport const modelErrors = state => state.inventoryModel.error\r\nexport const selectKits = state => state.inventoryKit.data\r\nexport const loadingKits = state => state.inventoryKit.loading\r\nexport const kitErrors = state => state.inventoryKit.error\r\nexport const selectHardwares = state => state.inventoryHardware.data\r\nexport const loadingHardwares = state => state.inventoryHardware.loading\r\nexport const hardwareErrors = state => state.inventoryHardware.error\r\n",
    "import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport { getKits } from \"@actions/inventory\"\nimport { Col, Row } from \"react-bootstrap\"\nimport { selectKits } from \"selectors/inventory\"\nimport PropTypes from \"prop-types\"\n\nclass KitAlert extends Component {\n  state = {\n    newDate: new Date(),\n  }\n\n  componentDidMount() {\n    this.props.getKits()\n  }\n\n  render() {\n    const { kits } = this.props\n    var kitsAr = []\n\n    if (kits) {\n      kitsAr = kits.filter(x => {\n        const toDays = (new Date(x.calibrationDueDate) - this.state.newDate) / (60 * 60 * 24 * 1000)\n        return toDays < 14 && toDays > 0\n      })\n    }\n\n    if (!kitsAr.length) return null\n    return (\n      <>\n        {kitsAr && (\n          <Row>\n            <Col>\n              <div className=\"ms-panel\">\n                <div className=\"ms-panel-body ms-news-flash-container\">\n                  <div className=\"ms-news-update\">\n                    <span>Calibration Alert</span>\n                  </div>\n                  <ul id=\"news-flash\">\n                    <li>\n                      <p>\n                        We need to make calibration for next hardwares and kits:{\" \"}\n                        {kitsAr.map(item => item.name).join(\", \")}\n                      </p>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </Col>\n          </Row>\n        )}\n      </>\n    )\n  }\n}\n\nKitAlert.propTypes = {\n  kits: PropTypes.array.isRequired,\n  kitsAr: PropTypes.array.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  kits: selectKits(state),\n})\n\nexport default connect(mapStateToProps, { getKits })(KitAlert)\n",
    "import React from \"react\"\nimport { Row, Col } from \"react-bootstrap\"\nimport Sidebar from \"@components/Dashboard/Sidebar\"\nimport KitAlert from \"@components/Dashboard/Inventory/KitAlert\"\n\nexport const Dashboard = ({ children }) => {\n  return (\n    <section className=\"main\">\n      <Row>\n        <Col>\n          <Sidebar />\n        </Col>\n        <Col lg=\"11\" className=\"container-left\">\n          <KitAlert />\n          {children}\n        </Col>\n      </Row>\n    </section>\n  )\n}\n"
  ],
  "sourceRoot": ""
}
