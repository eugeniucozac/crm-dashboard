{
  "version": 3,
  "sources": [
    "components/shared/Fields/CheckboxField.js",
    "components/Dashboard/Project/Quotes/QuoteCreated.js",
    "components/shared/KPEditor.js",
    "components/Dashboard/Project/Quotes/Editor.js",
    "components/Dashboard/Project/Quotes/CreateQuote.js"
  ],
  "names": [
    "CheckboxField",
    "name",
    "value",
    "label",
    "onChange",
    "row",
    "as",
    "Col",
    "className",
    "type",
    "QuoteCreated",
    "state",
    "total",
    "content",
    "quoteTemplates",
    "e",
    "setState",
    "target",
    "onCreate",
    "a",
    "preventDefault",
    "prepend",
    "sections",
    "openEditor",
    "values",
    "props",
    "toggleModal",
    "addGeneratedQuote",
    "services",
    "addQuotePrices",
    "context",
    "map",
    "indexSection",
    "filteredServices",
    "service",
    "indexService",
    "find",
    "item",
    "id",
    "price",
    "quoteServices",
    "this",
    "then",
    "alphabet",
    "initialValues",
    "obj",
    "toString",
    "getData",
    "enableReinitialize",
    "render",
    "errors",
    "noValidate",
    "onSubmit",
    "toUpperCase",
    "remove",
    "push",
    "replace",
    "lg",
    "defaultValue",
    "styles",
    "sign",
    "template",
    "key",
    "variant",
    "Component",
    "KPEditor",
    "ckeditorTextarea",
    "React",
    "createRef",
    "data",
    "addContentEditor",
    "initCkeditor",
    "addContentEditorRedux",
    "ckeditor",
    "window",
    "CKEDITOR",
    "allowedContent",
    "removePlugins",
    "height",
    "addCss",
    "instances",
    "on",
    "cols",
    "rows",
    "ref",
    "Editor",
    "pdfConvert",
    "numberQuote",
    "Math",
    "floor",
    "random",
    "checked",
    "onSave",
    "saveHtml",
    "quoteName",
    "htmltopdf",
    "hideModal",
    "addQuote",
    "projectId",
    "quotesLength",
    "contentEditor",
    "resetContentEditor",
    "history",
    "addHistory",
    "consultantId",
    "project",
    "addressBook",
    "addressName",
    "postCode",
    "city",
    "country",
    "converted",
    "statusId",
    "address",
    "templateName",
    "getProjects",
    "loadTemplate",
    "prevProps",
    "getHtml",
    "createdQuote",
    "prices",
    "head",
    "moment",
    "Date",
    "format",
    "quoteBlock",
    "join",
    "quotePrice",
    "index",
    "response",
    "isModalOpen",
    "Modal",
    "show",
    "onHide",
    "centered",
    "size",
    "Form",
    "Header",
    "closeButton",
    "ModalBody",
    "ModalFooter",
    "Button",
    "onClick",
    "compose",
    "withRouter",
    "connect",
    "selectGeneratedQuotes",
    "selectContentEditor",
    "selectProject",
    "selectQuotePrices",
    "selectAuthorizationId",
    "getGeneratedQuote",
    "resetGeneratedQuote",
    "getContentEditor",
    "getQuotePrices",
    "CreateQuote",
    "Array",
    "x",
    "i",
    "String",
    "fromCharCode",
    "computedMatch",
    "params",
    "quotes",
    "length",
    "onPrepend",
    "Object",
    "keys",
    "getQuotes",
    "getServices",
    "loading",
    "error",
    "servicesExercises",
    "getTemplates",
    "validationSchema",
    "Yup",
    "shape",
    "of",
    "required",
    "form",
    "section",
    "Row",
    "column",
    "placeholder",
    "selectQuotes",
    "loadingQuotes",
    "quotesErrors",
    "selectServices"
  ],
  "mappings": "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",
  "file": "static/js/14.4c317848.chunk.js",
  "sourcesContent": [
    "import React from \"react\"\nimport { FormGroup, FormControl, Row, Col } from \"react-bootstrap\"\nimport PropTypes from \"prop-types\"\n\nexport const CheckboxField = ({ name, value, label, onChange, row }) => {\n  return (\n    <Row>\n      <FormGroup as={Col}>\n        <label className=\"ms-checkbox-wrap\">\n          <FormControl\n            type=\"checkbox\"\n            onChange={onChange}\n            className={`form-check-input ${value ? \"checked\" : \"\"}`}\n            name={name}\n            value={value}\n          />\n          <i className=\"ms-checkbox-check\"></i>\n        </label>\n        <span>{label}</span>\n      </FormGroup>\n    </Row>\n  )\n}\n\nCheckboxField.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.bool.isRequired,\n  label: PropTypes.string.isRequired,\n}\n",
    "import React, { Component } from \"react\"\nimport { Row, Col, Button, Form, FormControl } from \"react-bootstrap\"\nimport { Formik, FieldArray, Field } from \"formik\"\nimport { FaPoundSign } from \"react-icons/fa\"\nimport styles from \"./Quotes.module.css\"\n\nclass QuoteCreated extends Component {\n  state = {\n    total: 0,\n    content: \"\",\n    quoteTemplates: [],\n  }\n\n  componentDidMount() {\n    this.props.quoteTemplates().then(quoteTemplates => {\n      this.setState({ quoteTemplates })\n    })\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  onCreate = async (e, state) => {\n    e.preventDefault()\n    this.setState({ prepend: state.sections })\n  }\n\n  openEditor = async (e, values) => {\n    e.preventDefault()\n    const { toggleModal, addGeneratedQuote, services, prepend, addQuotePrices } = this.props\n    const context = prepend.map((sections, indexSection) => {\n      const filteredServices = sections.services.map((service, indexService) => {\n        const { name, content, price } = services.find(item => item.id == service.id)\n        return { name, content, price, indexService, indexSection }\n      })\n      return { ...sections, services: filteredServices }\n    })\n    await addQuotePrices(values.quoteServices)\n    await addGeneratedQuote(context)\n    await toggleModal(true)\n  }\n\n  render() {\n    const { prepend, services, alphabet, onChange } = this.props\n    const { quoteTemplates } = this.state\n    const getData = () => {\n      let obj = {}\n      prepend.map(({ services }, indexSection) => {\n        return services.map((service, indexService) => {\n          const { price } = services.find(item => item.id == service.id)\n          obj = { ...obj, [`${alphabet[indexSection]}${indexService}`]: price.toString() }\n        })\n      })\n      return { quoteServices: { ...obj } }\n    }\n\n    return (\n      <div className=\"ms-panel\">\n        <div className=\"ms-panel-body\">\n          <h6 className=\"mb-3\">Generate a Quote</h6>\n          <Formik\n            initialValues={getData()}\n            enableReinitialize={true}\n            render={({ errors, values }) => {\n              return (\n                <Form noValidate onSubmit={e => this.openEditor(e, values, errors)}>\n                  {prepend.map(({ name, services }, indexSection) => (\n                    <>\n                      <Row className=\"section mt-2 mb-1\">\n                        <Col>\n                          <p>\n                            Section {alphabet[indexSection].toUpperCase()}: {name}\n                          </p>\n                        </Col>\n                      </Row>\n                      <FieldArray\n                        name={`sections.${indexSection}.services`}\n                        render={({ remove, push, replace }) => (\n                          <>\n                            {services.map(({ id }, indexService) => {\n                              const { name, price } = services.find(item => item.id == id)\n                              return (\n                                <Row className=\"service mt-2\">\n                                  <Col lg=\"9\">\n                                    <p>\n                                      Service {alphabet[indexSection].toUpperCase()}.{indexService + 1}: {name}\n                                    </p>\n                                  </Col>\n                                  <Col lg=\"3\">\n                                    <Row>\n                                      <Col lg=\"9\">\n                                        <Field\n                                          name={`quoteServices.${alphabet[indexSection]}${indexService}`}\n                                          className=\"form-control\"\n                                          type=\"text\"\n                                          defaultValue={price}\n                                        />\n                                      </Col>\n                                      <Col lg=\"1\" className={styles.sign}>\n                                        <FaPoundSign />\n                                      </Col>\n                                    </Row>\n                                  </Col>\n                                </Row>\n                              )\n                            })}\n                          </>\n                        )}\n                      />\n                    </>\n                  ))}\n                  <Row className=\"my-3\">\n                    <Col lg=\"3\">\n                      <p>Choose quote template</p>\n                    </Col>\n                    <Col lg=\"9\">\n                      <FormControl as=\"select\" name=\"templateName\" onChange={onChange}>\n                        {quoteTemplates.map((template, id) => (\n                          <option key={id} value={template}>\n                            {template}\n                          </option>\n                        ))}\n                      </FormControl>\n                    </Col>\n                  </Row>\n                  <Row className=\"justify-content-end\">\n                    <Col lg={6}>\n                      <Button variant=\"primary\" type=\"submit\" className=\"w-50 float-right\">\n                        Open/Change Quote\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              )\n            }}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default QuoteCreated\n",
    "import React, { Component } from \"react\"\nimport \"ckeditor4/ckeditor.js\"\n\nexport default class KPEditor extends Component {\n  constructor(props) {\n    super(props)\n    this.ckeditorTextarea = React.createRef()\n  }\n\n  componentDidMount() {\n    const { data, addContentEditor } = this.props\n    this.initCkeditor(addContentEditor)\n    this.setState({ data })\n  }\n\n  initCkeditor(addContentEditorRedux) {\n    const ckeditor = window.CKEDITOR\n\n    ckeditor.replace(\"ckeditor\", {\n      allowedContent: true,\n      removePlugins: \"sourcearea\",\n      height: 650,\n    })\n    ckeditor.addCss(\n      \".cke_editable{ zoom: 1.4; margin: 0 } .cke_editable .hide{display: none!important} .cke_editable .head{margin-top: 1rem} .cke_editable .head h2{display:none}\"\n    )\n    ckeditor.instances.ckeditor.on(\"change\", function () {\n      addContentEditorRedux(this.getData())\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <textarea cols=\"80\" name=\"ckeditor\" rows=\"30\" ref={this.ckeditorTextarea} value={this.props.data} />\n      </div>\n    )\n  }\n}\n",
    "import React, { Component } from \"react\"\r\nimport { Button, Modal, ModalBody, Form, ModalFooter } from \"react-bootstrap\"\r\nimport { CheckboxField } from \"@components/shared/Fields/CheckboxField\"\r\nimport KPEditor from \"@components/shared/KPEditor\"\r\nimport { connect } from \"react-redux\"\r\nimport { compose } from \"redux\"\r\nimport { withRouter } from \"react-router-dom\"\r\nimport {\r\n  getGeneratedQuote,\r\n  resetGeneratedQuote,\r\n  getContentEditor,\r\n  addContentEditor,\r\n  resetContentEditor,\r\n  getQuotePrices,\r\n} from \"@actions/quote\"\r\nimport { selectAuthorizationId } from \"@selectors/authorization\"\r\nimport { getProjects } from \"@actions/project\"\r\nimport { selectProject } from \"@selectors/project\"\r\nimport { selectGeneratedQuotes, selectContentEditor, selectQuotePrices } from \"@selectors/quote\"\r\nimport moment from \"moment\"\r\n\r\nclass Editor extends Component {\r\n  state = {\r\n    pdfConvert: false,\r\n    data: \"\",\r\n    numberQuote: Math.floor(Math.random() * 1000000),\r\n  }\r\n\r\n  onChange = e => {\r\n    if (e.target.type === \"checkbox\") {\r\n      if (e.target.checked) {\r\n        this.setState({ pdfConvert: true })\r\n      } else {\r\n        this.setState({ pdfConvert: false })\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { templateName, getProjects } = this.props\r\n    this.loadTemplate(templateName)\r\n    getProjects()\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { templateName } = this.props\r\n    if (templateName !== prevProps.templateName) {\r\n      this.loadTemplate(templateName)\r\n    }\r\n  }\r\n\r\n  loadTemplate(templateName) {\r\n    const {\r\n      getHtml,\r\n      createdQuote,\r\n      quotesLength,\r\n      alphabet,\r\n      addContentEditor,\r\n      projectId,\r\n      prices,\r\n      project: {\r\n        addressBook: { addressName, postCode, city, country },\r\n      },\r\n    } = this.props\r\n    const head = `<div class=\"head\">\r\n                    <p>${moment(new Date()).format(\"D MMMM YYYY\")}</p>\r\n                    <p>Ref: ${projectId}.${moment(new Date()).format(\"YYMMDD\")}.Q${quotesLength + 1}</p>\r\n                    <p>John Doe</p>\r\n                    <p>KP Acoustics Ltd.</p>\r\n                    <p>By email to:</p>\r\n                    <p>Dear</p>\r\n                    <h2>${projectId}: <a class=\"address\">${addressName}, ${postCode}, ${city}, ${country}</a></h2>\r\n                  </div>`\r\n\r\n    const quoteBlock = `<div class=\"quote-block\">${createdQuote\r\n      .map((item, indexSection) => {\r\n        return `<h2>${alphabet[indexSection].toUpperCase()}. ${item.name.toUpperCase()}</h2>\r\n        ${item.services\r\n          .map(\r\n            service =>\r\n              `<h2>${alphabet[service.indexSection].toUpperCase()}.${service.indexService + 1}: ${service.name}</h2>${\r\n                service.content\r\n              }`\r\n          )\r\n          .join(\" \")}`\r\n      })\r\n      .join(\" \")}</div>`\r\n\r\n    const quotePrice = `<div class=\"quote-price\">${createdQuote\r\n      .map((item, indexSection) => {\r\n        return `<h3>${alphabet[indexSection].toUpperCase()}. ${item.name}</h3>\r\n          <table>${item.services\r\n            .map((service, index) => {\r\n              return `<tr><td>${alphabet[service.indexSection].toUpperCase()}.${service.indexService + 1}: ${\r\n                service.name\r\n              } </td><td style=\"text-align: right\"><strong> £${prices[`a${index}`]} (+VAT)</strong> </td></tr>`\r\n            })\r\n            .join(\" \")}</table>`\r\n      })\r\n      .join(\" \")}</div>`\r\n\r\n    getHtml(templateName).then(response => {\r\n      this.setState({\r\n        data: response\r\n          .replace('<div class=\"quote-block\"></div>', quoteBlock)\r\n          .replace('<div class=\"head\"></div>', head)\r\n          .replace('<div class=\"quote-price\"></div>', quotePrice),\r\n      })\r\n      addContentEditor(\r\n        response\r\n          .replace('<div class=\"quote-block\"></div>', quoteBlock)\r\n          .replace('<div class=\"head\"></div>', head)\r\n          .replace('<div class=\"quote-price\"></div>', quotePrice)\r\n      )\r\n    })\r\n  }\r\n\r\n  onSave = async e => {\r\n    e.preventDefault()\r\n    const {\r\n      saveHtml,\r\n      quoteName,\r\n      htmltopdf,\r\n      hideModal,\r\n      addQuote,\r\n      projectId,\r\n      quotesLength,\r\n      contentEditor,\r\n      resetContentEditor,\r\n      history,\r\n      addHistory,\r\n      consultantId,\r\n      project: {\r\n        addressBook: { addressName, postCode, city, country },\r\n      },\r\n    } = this.props\r\n\r\n    const { pdfConvert } = this.state\r\n    await addQuote(projectId.replace(/^0+/, \"\"), { name: quoteName, converted: pdfConvert })\r\n    !quotesLength && (await addHistory(projectId.replace(/^0+/, \"\"), { statusId: 2, consultantId }))\r\n    await saveHtml(quoteName, contentEditor)\r\n    pdfConvert &&\r\n      (await htmltopdf(quoteName, {\r\n        projectId,\r\n        quotesLength,\r\n        address: `${addressName}, ${postCode}, ${city}, ${country}`,\r\n      }))\r\n    await hideModal(false)\r\n    await resetContentEditor()\r\n    this.setState({ pdfConvert: false })\r\n    history.push(`/dashboard/project/${projectId}`)\r\n  }\r\n\r\n  render() {\r\n    const { data, pdfConvert } = this.state\r\n    const { isModalOpen, hideModal, addContentEditor } = this.props\r\n    return (\r\n      <Modal show={isModalOpen && data} onHide={hideModal} className=\"editor\" centered size=\"xl\">\r\n        <Form noValidate onSubmit={this.onSave}>\r\n          <Modal.Header className=\"bg-primary\" closeButton>\r\n            <h5 className=\"modal-title has-icon text-white\">Editor</h5>\r\n          </Modal.Header>\r\n          <ModalBody>\r\n            <KPEditor data={data} addContentEditor={addContentEditor} />\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <CheckboxField name=\"pdfConvert\" value={pdfConvert} label=\"Convert it to PDF?\" onChange={this.onChange} />\r\n            <Button variant=\"primary\" className=\"swal2-styled btn-light\" onClick={() => hideModal(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\" className=\"swal2-confirm swal2-styled\">\r\n              Save\r\n            </Button>\r\n          </ModalFooter>\r\n        </Form>\r\n      </Modal>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => {\r\n  return {\r\n    createdQuote: selectGeneratedQuotes(state),\r\n    contentEditor: selectContentEditor(state),\r\n    project: selectProject(state, props.projectId),\r\n    prices: selectQuotePrices(state),\r\n    consultantId: selectAuthorizationId(state),\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  withRouter,\r\n  connect(mapStateToProps, {\r\n    getGeneratedQuote,\r\n    resetGeneratedQuote,\r\n    getContentEditor,\r\n    addContentEditor,\r\n    resetContentEditor,\r\n    getProjects,\r\n    getQuotePrices,\r\n  })\r\n)(Editor)\r\n",
    "import React, { Component, Fragment } from \"react\"\nimport { Row, Col, Button, Form, FormGroup, FormLabel } from \"react-bootstrap\"\nimport { FaTimes, FaPlus } from \"react-icons/fa\"\nimport { Formik, FieldArray, Field } from \"formik\"\nimport { connect } from \"react-redux\"\nimport {\n  getQuotes,\n  addQuote,\n  getServices,\n  getTemplates,\n  getHtml,\n  addGeneratedQuote,\n  addQuotePrices,\n} from \"@actions/quote\"\nimport { addHistory } from \"@actions/project\"\nimport { selectQuotes, loadingQuotes, quotesErrors, selectServices } from \"@selectors/quote\"\nimport { saveHtml, htmltopdf, quoteTemplates } from \"@services/quote\"\nimport { Loading } from \"@components/shared/Loading\"\nimport Sidebar from \"../../Sidebar\"\nimport { Breadcrumb } from \"@components/shared/Breadcrumb\"\nimport PropTypes from \"prop-types\"\nimport QuoteCreated from \"./QuoteCreated\"\nimport styles from \"./Quotes.module.css\"\nimport Editor from \"./Editor\"\nimport * as Yup from \"yup\"\nimport moment from \"moment\"\n\nclass CreateQuote extends Component {\n  state = {\n    alphabet: [...Array(26)].map((x, i) => String.fromCharCode(i + 97)),\n    prepend: {},\n    quoteName: `${this.props.computedMatch.params.id}.${moment(new Date()).format(\"YYMMDD\")}.Q${\n      this.props.quotes.length + 1\n    }`,\n    templateName: \"QuoteTemplateOne\",\n    isModalOpen: false,\n    sections: [\n      {\n        name: \"Scope of work\",\n        price: null,\n        statusId: 1,\n        services: [{ id: null }],\n      },\n    ],\n  }\n\n  componentDidMount() {\n    this.props.getQuotes()\n    this.props.getServices()\n  }\n\n  onPrepend = (e, state, errors) => {\n    e.preventDefault()\n    !Object.keys(errors).length && state.sections[0].services[0].id && this.setState({ prepend: state.sections })\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  toggleModal = isModalOpen => {\n    this.setState({ isModalOpen })\n  }\n\n  render() {\n    const {\n      error,\n      loading,\n      quotes,\n      servicesExercises,\n      getTemplates,\n      getHtml,\n      addHistory,\n      addQuote,\n      computedMatch,\n      addGeneratedQuote,\n      addQuotePrices,\n    } = this.props\n    const { isModalOpen, sections, alphabet, prepend, quoteName, templateName } = this.state\n\n    if (loading) return <Loading />\n    return (\n      <section className=\"main\">\n        <Row>\n          <Col>\n            <Sidebar />\n          </Col>\n          <Col lg=\"11\" className=\"container-left\">\n            <Breadcrumb />\n            <Row>\n              <Col>\n                <div className=\"ms-panel\">\n                  <div className=\"ms-panel-body\">\n                    <h6>Create a Quote</h6>\n                    <Formik\n                      initialValues={this.state}\n                      validationSchema={Yup.object().shape({\n                        sections: Yup.array().of(\n                          Yup.object().shape({\n                            name: Yup.string().required(\"Section name is required\"),\n                            services: Yup.array().of(\n                              Yup.object().shape({\n                                id: Yup.number().required(\"Id is required\"),\n                              })\n                            ),\n                          })\n                        ),\n                      })}\n                      render={({ errors, values }) => {\n                        return (\n                          <Form noValidate className={styles.form} onSubmit={e => this.onPrepend(e, values, errors)}>\n                            <FieldArray\n                              name=\"sections\"\n                              render={({ remove, push }) => (\n                                <>\n                                  {values.sections.length > 0 &&\n                                    values.sections.map((section, indexSection) => {\n                                      return (\n                                        <Fragment key={indexSection}>\n                                          <FormGroup as={Row}>\n                                            <Col lg={10}>\n                                              <Row>\n                                                <FormLabel column lg=\"2\">\n                                                  Section {alphabet[indexSection].toUpperCase()}\n                                                </FormLabel>\n                                                <Col lg=\"10\">\n                                                  <Field\n                                                    type=\"text\"\n                                                    placeholder=\"Post-tender acoustic monitoring\"\n                                                    className={`form-control ${\n                                                      errors.sections &&\n                                                      errors.sections[indexSection] &&\n                                                      errors.sections[indexSection].name\n                                                        ? \"is-invalid\"\n                                                        : \"\"\n                                                    }`}\n                                                    name={`sections.${indexSection}.name`}\n                                                  />\n                                                </Col>\n                                              </Row>\n                                            </Col>\n                                            <Col lg={2}>\n                                              {indexSection === 0 ? (\n                                                <Button\n                                                  onClick={() =>\n                                                    push({\n                                                      name: \"\",\n                                                      price: null,\n                                                      statusId: 1,\n                                                      services: [\n                                                        {\n                                                          id: null,\n                                                        },\n                                                      ],\n                                                    })\n                                                  }\n                                                  className=\"btn btn-success mt-0 w-100\"\n                                                  name=\"button\"\n                                                >\n                                                  <FaPlus />\n                                                </Button>\n                                              ) : (\n                                                <Button\n                                                  onClick={() => remove(indexSection)}\n                                                  className=\"btn btn-danger mt-0 w-100\"\n                                                  name=\"button\"\n                                                >\n                                                  <FaTimes />\n                                                </Button>\n                                              )}\n                                            </Col>\n                                          </FormGroup>\n                                          <FieldArray\n                                            name={`sections.${indexSection}.services`}\n                                            render={({ remove, push, replace }) => (\n                                              <>\n                                                {section.services.length > 0 &&\n                                                  section.services.map((service, indexService) => {\n                                                    return (\n                                                      <Fragment key={indexService}>\n                                                        <FormGroup as={Row}>\n                                                          <Col lg={10}>\n                                                            <Row>\n                                                              <FormLabel column lg=\"2\">\n                                                                Service {alphabet[indexSection].toUpperCase()}.\n                                                                {indexService + 1}\n                                                              </FormLabel>\n                                                              <Col lg=\"10\">\n                                                                <Field\n                                                                  as=\"select\"\n                                                                  name={`sections.${indexSection}.services.${indexService}.id`}\n                                                                  className={`form-control ${\n                                                                    errors.sections &&\n                                                                    errors.sections[indexSection] &&\n                                                                    errors.sections[indexSection].services &&\n                                                                    errors.sections[indexSection].services[indexService]\n                                                                      ? \"is-invalid\"\n                                                                      : \"\"\n                                                                  }`}\n                                                                >\n                                                                  <option>Select Service</option>\n                                                                  {servicesExercises.map(service => (\n                                                                    <option key={service.id} value={service.id}>\n                                                                      {service.name} {service.price} £\n                                                                    </option>\n                                                                  ))}\n                                                                </Field>\n                                                              </Col>\n                                                            </Row>\n                                                          </Col>\n                                                          <Col lg={2}>\n                                                            {indexService === 0 ? (\n                                                              <Button\n                                                                onClick={() =>\n                                                                  push({\n                                                                    id: null,\n                                                                  })\n                                                                }\n                                                                className=\"btn btn-success mt-0 w-100\"\n                                                                name=\"button\"\n                                                              >\n                                                                <FaPlus />\n                                                              </Button>\n                                                            ) : (\n                                                              <Button\n                                                                onClick={() => remove(indexService)}\n                                                                className=\"btn btn-danger mt-0 w-100\"\n                                                                name=\"button\"\n                                                              >\n                                                                <FaTimes />\n                                                              </Button>\n                                                            )}\n                                                          </Col>\n                                                        </FormGroup>\n                                                      </Fragment>\n                                                    )\n                                                  })}\n                                              </>\n                                            )}\n                                          />\n                                        </Fragment>\n                                      )\n                                    })}\n                                </>\n                              )}\n                            />\n                            <Row className=\"justify-content-end\">\n                              <Col lg={9}>\n                                <Button variant=\"primary\" type=\"submit\" className=\"w-25 float-right\">\n                                  Create/Update\n                                </Button>\n                              </Col>\n                            </Row>\n                          </Form>\n                        )\n                      }}\n                    />\n                  </div>\n                </div>\n              </Col>\n              <Col>\n                {Object.keys(prepend).length ? (\n                  <QuoteCreated\n                    alphabet={alphabet}\n                    prepend={prepend}\n                    quoteTemplates={getTemplates}\n                    services={servicesExercises}\n                    toggleModal={this.toggleModal}\n                    quoteName={quoteName}\n                    onChange={this.onChange}\n                    addGeneratedQuote={addGeneratedQuote}\n                    addQuotePrices={addQuotePrices}\n                  />\n                ) : null}\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        {isModalOpen && (\n          <Editor\n            hideModal={this.toggleModal}\n            isModalOpen={isModalOpen}\n            saveHtml={saveHtml}\n            getHtml={getHtml}\n            htmltopdf={htmltopdf}\n            addHistory={addHistory}\n            alphabet={alphabet}\n            addQuote={addQuote}\n            quoteName={quoteName}\n            templateName={templateName}\n            projectId={computedMatch.params.id}\n            quotesLength={quotes.length}\n          />\n        )}\n      </section>\n    )\n  }\n}\n\nCreateQuote.propTypes = {\n  isModalOpen: PropTypes.number.isRequired,\n  loading: PropTypes.bool.isRequired,\n  quotes: PropTypes.array.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  quotes: selectQuotes(state),\n  loading: loadingQuotes(state),\n  error: quotesErrors(state),\n  servicesExercises: selectServices(state),\n})\n\nexport default connect(mapStateToProps, {\n  getQuotes,\n  getServices,\n  getTemplates,\n  getHtml,\n  addHistory,\n  addQuote,\n  addGeneratedQuote,\n  addQuotePrices,\n})(CreateQuote)\n"
  ],
  "sourceRoot": ""
}
