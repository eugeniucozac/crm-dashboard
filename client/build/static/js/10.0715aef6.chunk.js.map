{
  "version": 3,
  "sources": [
    "../node_modules/shortid/lib/alphabet.js",
    "../node_modules/shortid/index.js",
    "../node_modules/shortid/lib/index.js",
    "../node_modules/shortid/lib/random/random-from-seed.js",
    "../node_modules/shortid/lib/build.js",
    "../node_modules/shortid/lib/generate.js",
    "../node_modules/shortid/lib/random/random-byte-browser.js",
    "../node_modules/nanoid/format.browser.js",
    "../node_modules/shortid/lib/is-valid.js",
    "../node_modules/shortid/lib/util/cluster-worker-id-browser.js",
    "components/shared/Fields/NextCalibration.js",
    "components/shared/MultiplyHardware.js",
    "components/Dashboard/Inventory/Kit/KitForm.js",
    "components/Dashboard/Inventory/Kit/EditKitForm.js",
    "components/Dashboard/Inventory/Kit/index.js"
  ],
  "names": [
    "alphabet",
    "previousSeed",
    "shuffled",
    "randomFromSeed",
    "require",
    "ORIGINAL",
    "reset",
    "setCharacters",
    "_alphabet_",
    "length",
    "Error",
    "unique",
    "split",
    "filter",
    "item",
    "ind",
    "arr",
    "lastIndexOf",
    "join",
    "getShuffled",
    "characterIndex",
    "sourceArray",
    "targetArray",
    "r",
    "nextValue",
    "Math",
    "floor",
    "push",
    "splice",
    "shuffle",
    "module",
    "exports",
    "get",
    "characters",
    "seed",
    "lookup",
    "index",
    "build",
    "isValid",
    "clusterWorkerId",
    "generate",
    "seedValue",
    "worker",
    "workerId",
    "newCharacters",
    "undefined",
    "_seed_",
    "counter",
    "previousSeconds",
    "str",
    "seconds",
    "Date",
    "now",
    "random",
    "format",
    "number",
    "done",
    "loopCounter",
    "pow",
    "randomByte",
    "crypto",
    "window",
    "msCrypto",
    "getRandomValues",
    "size",
    "Uint8Array",
    "bytes",
    "i",
    "mask",
    "log",
    "LN2",
    "step",
    "id",
    "RegExp",
    "replace",
    "test",
    "NextCalibration",
    "name",
    "label",
    "onChange",
    "error",
    "value",
    "calibrations",
    "FormGroup",
    "FormLabel",
    "FormControl",
    "as",
    "defaultValue",
    "isInvalid",
    "map",
    "calibration",
    "key",
    "charAt",
    "MultiplyHardware",
    "state",
    "rows",
    "shortid",
    "onAdd",
    "Object",
    "keys",
    "setState",
    "onRemove",
    "props",
    "output",
    "onSelect",
    "e",
    "persist",
    "data",
    "target",
    "values",
    "this",
    "optionsData",
    "options",
    "hardware",
    "type",
    "model",
    "manufacture",
    "serialNumber",
    "sort",
    "a",
    "b",
    "localeCompare",
    "rowKey",
    "className",
    "Row",
    "Col",
    "lg",
    "Button",
    "onClick",
    "Component",
    "KitForm",
    "calibrationCurDate",
    "calibrationDueDate",
    "calibrationNumber",
    "hardwares",
    "onHardwaresChange",
    "onSubmit",
    "preventDefault",
    "addKit",
    "addNexCalibration",
    "dateFormated",
    "setFullYear",
    "getFullYear",
    "parseInt",
    "getMonth",
    "getDate",
    "isFaulty",
    "hardwaresItems",
    "Form",
    "noValidate",
    "TextField",
    "placeholder",
    "variant",
    "EditKitForm",
    "calibrationAlert",
    "kitToEdit",
    "moment",
    "selectedOption",
    "checked",
    "getCurrentDate",
    "sendCalibrationNotification",
    "updateKit",
    "hideKit",
    "formatedDate",
    "add",
    "find",
    "difference",
    "toDays",
    "kits",
    "prevState",
    "CheckboxField",
    "Kit",
    "isModalOpen",
    "currentDate",
    "inventoryData",
    "kitId",
    "currentPage",
    "toggleModal",
    "addViewIssue",
    "editKit",
    "kit",
    "pageSwitcher",
    "getKits",
    "getHardwares",
    "roleName",
    "loading",
    "removeKit",
    "alertName",
    "lastItem",
    "firstItem",
    "formatedItems",
    "createdAt",
    "slice",
    "Loading",
    "Dashboard",
    "Table",
    "striped",
    "bordered",
    "hover",
    "substr",
    "duration",
    "asDays",
    "ModalDelete",
    "hideModal",
    "deleteState",
    "disabled",
    "inventory",
    "category",
    "issueCategory",
    "connect",
    "selectKits",
    "selectHardwares",
    "loadingHardwares",
    "kitErrors",
    "selectRoleAuthorization"
  ],
  "mappings": "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",
  "file": "static/js/10.0715aef6.chunk.js",
  "sourcesContent": [
    "'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n",
    "'use strict';\nmodule.exports = require('./lib/index');\n",
    "'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n",
    "'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n",
    "'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n",
    "'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n",
    "'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n",
    "// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n",
    "'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n",
    "'use strict';\n\nmodule.exports = 0;\n",
    "import React from \"react\"\nimport { calibrations } from \"@data\"\nimport { FormGroup, FormControl, FormLabel } from \"react-bootstrap\"\nimport PropTypes from \"prop-types\"\n\nexport const NextCalibration = ({ name, label, onChange, error, value }) => {\n  if (!calibrations.length) return null\n  return (\n    <FormGroup>\n      <FormLabel>{label}</FormLabel>\n      <FormControl as=\"select\" name={name} defaultValue={value} onChange={onChange} isInvalid={!!error}>\n        <option>Choose Calibration</option>\n        {calibrations.map(calibration => (\n          <option key={calibration.charAt(0)} value={calibration.charAt(0)}>\n            {calibration}\n          </option>\n        ))}\n      </FormControl>\n    </FormGroup>\n  )\n}\n\nNextCalibration.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  calibrations: PropTypes.array.isRequired,\n}\n",
    "import React, { Component } from \"react\"\nimport { FaTimes, FaPlus } from \"react-icons/fa\"\nimport { FormControl, FormGroup, Col, Row, FormLabel, Button } from \"react-bootstrap\"\nimport shortid from \"shortid\"\nimport PropTypes from \"prop-types\"\n\nexport class MultiplyHardware extends Component {\n  state = {\n    rows: { [shortid.generate()]: \"\" },\n  }\n\n  onAdd = () => {\n    let { rows } = this.state\n    if (Object.keys(rows).length < 3) {\n      this.setState({ rows: { ...rows, [shortid.generate()]: \"\" } })\n    }\n  }\n\n  onRemove = key => {\n    const state = { ...this.state.rows }\n    const { onChange } = this.props\n    delete state[key]\n    this.setState({ rows: state })\n    onChange(this.output(state))\n  }\n\n  onSelect = e => {\n    e.persist()\n    const { onChange } = this.props\n    const data = { ...this.state.rows, [e.target.name]: e.target.value }\n    this.setState({ rows: data })\n    onChange(this.output(data))\n  }\n\n  output = data => {\n    return Object.values(data).filter(value => !!value)\n  }\n\n  render() {\n    const { optionsData, label, error } = this.props\n    const { rows } = this.state\n\n    if (!optionsData || !optionsData.length) return null\n    const options = optionsData.map(hardware => ({\n      id: hardware.id,\n      name: `${hardware.type.name} ${hardware.model.manufacture.name} ${hardware.model.name} ${hardware.serialNumber}`,\n    }))\n    options.sort((a, b) => a.name.localeCompare(b.name))\n\n    return (\n      <>\n        <FormLabel>{label}</FormLabel>\n        {Object.keys(rows).map((rowKey, index) => (\n          <FormGroup key={rowKey}>\n            {error && <div className=\"invalid-feedback select\">{error}</div>}\n            <Row className=\"hardware margin-label\">\n              <Col lg={10}>\n                <FormControl\n                  as=\"select\"\n                  name={rowKey}\n                  value={rows[rowKey]}\n                  onChange={this.onSelect}\n                  isInvalid={!!error}\n                >\n                  <option value=\"\">Select Hardware Name</option>\n                  {options.map(({ id, name }) => (\n                    <option key={id} value={id}>\n                      {name}\n                    </option>\n                  ))}\n                </FormControl>\n              </Col>\n              <Col lg={2}>\n                {index === 0 ? (\n                  <Button onClick={this.onAdd} className=\"btn btn-success\" name=\"button\">\n                    <FaPlus />\n                  </Button>\n                ) : (\n                  <Button onClick={() => this.onRemove(rowKey)} className=\"btn btn-danger\" name=\"button\">\n                    <FaTimes />\n                  </Button>\n                )}\n              </Col>\n            </Row>\n          </FormGroup>\n        ))}\n      </>\n    )\n  }\n}\n\nMultiplyHardware.propTypes = {\n  rows: PropTypes.object.isRequired,\n}\n",
    "import React, { Component } from \"react\"\nimport { Button, Col, Row, Form } from \"react-bootstrap\"\nimport { TextField } from \"@components/shared/Fields/TextField\"\nimport { NextCalibration } from \"@components/shared/Fields/NextCalibration\"\nimport { MultiplyHardware } from \"@components/shared/MultiplyHardware\"\nimport PropTypes from \"prop-types\"\n\nexport class KitForm extends Component {\n  state = {\n    calibrationCurDate: \"\",\n    calibrationDueDate: \"\",\n    name: \"\",\n    calibrationNumber: \"\",\n    hardwares: [],\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  onHardwaresChange = hardwares => {\n    this.setState({ hardwares })\n  }\n\n  onSubmit = async e => {\n    e.preventDefault()\n    const { calibrationCurDate, calibrationDueDate, name, calibrationNumber, hardwares } = this.state\n    const { addKit } = this.props\n    let addNexCalibration = new Date(calibrationCurDate)\n    const dateFormated = new Date(\n      addNexCalibration.setFullYear(addNexCalibration.getFullYear() + parseInt(calibrationDueDate))\n    )\n\n    await addKit({\n      name,\n      calibrationNumber,\n      calibrationCurDate,\n      calibrationDueDate: `${dateFormated.getFullYear()}-${dateFormated.getMonth() + 1}-${dateFormated.getDate()}`,\n      isFaulty: false,\n      hardwares,\n    })\n    this.setState({\n      name: \"\",\n      calibrationNumber: \"\",\n      calibrationCurDate: \"\",\n      calibrationDueDate: false,\n    })\n  }\n\n  render() {\n    const { name, calibrationNumber, calibrationCurDate, calibrationDueDate } = this.state\n    const { error, hardwaresItems } = this.props\n\n    return (\n      <>\n        <div className=\"ms-panel-header\">\n          <h6>Add kit</h6>\n        </div>\n        <div className=\"ms-panel-body\">\n          <Form noValidate onSubmit={this.onSubmit}>\n            <TextField\n              name=\"name\"\n              value={name}\n              label=\"Name\"\n              placeholder=\"Ex: Kit\"\n              onChange={this.onChange}\n              error={error && error.data.name}\n            />\n            <MultiplyHardware label=\"Hardwares\" optionsData={hardwaresItems} onChange={this.onHardwaresChange} />\n            <TextField\n              name=\"calibrationNumber\"\n              value={calibrationNumber}\n              label=\"Calibration Number\"\n              placeholder=\"Ex: Calibration Number\"\n              onChange={this.onChange}\n              error={error && error.data.calibrationNumber}\n            />\n            <TextField\n              name=\"calibrationCurDate\"\n              type=\"date\"\n              value={calibrationCurDate}\n              label=\"Current Calibation Date\"\n              placeholder=\"Ex: Date\"\n              onChange={this.onChange}\n              error={error && error.data.calibrationCurDate}\n            />\n            <NextCalibration\n              name=\"calibrationDueDate\"\n              label=\"Next Calibration\"\n              value={calibrationDueDate}\n              placeholder=\"Ex: Date\"\n              onChange={this.onChange}\n              error={error && error.data.calibrationDueDate}\n            />\n            <Row>\n              <Col>\n                <Button variant=\"primary\" type=\"submit\" className=\"w-25 float-right\">\n                  Add\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </div>\n      </>\n    )\n  }\n}\n\nKitForm.propTypes = {\n  name: PropTypes.string.isRequired,\n  calibrationNumber: PropTypes.string.isRequired,\n  calibrationCurDate: PropTypes.instanceOf(Date),\n  calibrationDueDate: PropTypes.instanceOf(Date),\n  hardwares: PropTypes.array.isRequired,\n}\n",
    "import React, { Component } from \"react\"\nimport { Col, Row, Form, Button } from \"react-bootstrap\"\nimport { TextField } from \"@components/shared/Fields/TextField\"\nimport { NextCalibration } from \"@components/shared/Fields/NextCalibration\"\nimport { CheckboxField } from \"@components/shared/Fields/CheckboxField\"\nimport moment from \"moment\"\nimport PropTypes from \"prop-types\"\n\nexport class EditKitForm extends Component {\n  state = {\n    calibrationAlert: [],\n    isFaulty: this.props.kitToEdit.isFaulty,\n    calibrationNumber: this.props.kitToEdit.calibrationNumber,\n    calibrationCurDate: moment(this.props.kitToEdit.calibrationCurDate).format(\"YYYY-MM-DD\"),\n    calibrationDueDate: this.props.kitToEdit.calibrationDueDate,\n    selectedOption:\n      parseInt(moment(this.props.kitToEdit.calibrationDueDate).format(\"YYYY\")) -\n      parseInt(moment(this.props.kitToEdit.calibrationCurDate).format(\"YYYY\")),\n  }\n\n  componentDidMount() {\n    const getCurrentDate = new Date()\n    const { kits } = this.props\n\n    kits.map(item => {\n      const difference = new Date(item.calibrationDueDate) - getCurrentDate\n      const toDays = difference / (60 * 60 * 24 * 1000)\n      if (toDays < 14 && toDays > 0) {\n        this.setState(prevState => ({\n          calibrationAlert: [...prevState.calibrationAlert, item],\n        }))\n      }\n    })\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n\n    if (e.target.type === \"checkbox\") {\n      if (e.target.checked) {\n        this.setState({ isFaulty: true })\n      } else {\n        this.setState({ isFaulty: false })\n      }\n    }\n\n    if (e.target.name === \"calibrationDueDate\") {\n      this.setState({ selectedOption: e.target.value })\n    }\n  }\n\n  onSubmit = async e => {\n    e.preventDefault()\n    const getCurrentDate = new Date()\n    const { calibrationCurDate, calibrationNumber, isFaulty, calibrationAlert, selectedOption } = this.state\n    const {\n      kitToEdit: { id },\n      sendCalibrationNotification,\n      updateKit,\n      hideKit,\n    } = this.props\n    let formatedDate = moment(calibrationCurDate, \"YYYY-MM-DD\").add(selectedOption, \"years\").format(\"YYYY-MM-DD\")\n\n    if (calibrationAlert.find(item => item.id === id)) {\n      const difference = new Date(formatedDate) - getCurrentDate\n      const toDays = difference / (60 * 60 * 24 * 1000)\n      if (toDays < 14 && toDays > 0) {\n        sendCalibrationNotification()\n      }\n    }\n\n    await updateKit(id, {\n      calibrationNumber,\n      isFaulty,\n      calibrationCurDate,\n      calibrationDueDate: formatedDate,\n    })\n    await hideKit(null)\n  }\n\n  render() {\n    const { isFaulty, calibrationNumber, calibrationCurDate, selectedOption } = this.state\n    const { error, hideKit } = this.props\n\n    return (\n      <>\n        <div className=\"ms-panel-header\">\n          <h6>Edit kit</h6>\n        </div>\n        <div className=\"ms-panel-body\">\n          <Form noValidate onSubmit={this.onSubmit}>\n            <CheckboxField name=\"isFaulty\" value={isFaulty} label=\"Item is is faulty\" onChange={this.onChange} />\n            <TextField\n              name=\"calibrationNumber\"\n              value={calibrationNumber}\n              label=\"Calibration Number\"\n              placeholder=\"Ex: 8932435654\"\n              onChange={this.onChange}\n              error={error && error.data.calibrationNumber}\n            />\n            <TextField\n              name=\"calibrationCurDate\"\n              type=\"date\"\n              value={calibrationCurDate}\n              label=\"Current Calibation Date\"\n              placeholder=\"Ex: Date\"\n              onChange={this.onChange}\n              error={error && error.data.calibrationCurDate}\n            />\n            <NextCalibration\n              name=\"calibrationDueDate\"\n              label=\"Next Calibration\"\n              value={selectedOption}\n              placeholder=\"Ex: Date\"\n              onChange={this.onChange}\n              error={error && error.data.calibrationDueDate}\n            />\n            <Row>\n              <Col>\n                <Button type=\"submit\" className=\"w-25 float-right\">\n                  Update\n                </Button>\n                <Button className=\"btn btn-primary w-25 mr-1 float-right\" onClick={() => hideKit(null)}>\n                  Cancel\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </div>\n      </>\n    )\n  }\n}\n\nEditKitForm.propTypes = {\n  isFaulty: PropTypes.bool.isRequired,\n  calibrationNumber: PropTypes.string.isRequired,\n  calibrationCurDate: PropTypes.instanceOf(Date),\n  selectedOption: PropTypes.number.isRequired,\n  getHardwares: PropTypes.func.isRequired,\n  getKits: PropTypes.func.isRequired,\n  updateKit: PropTypes.func.isRequired,\n}\n",
    "import React, { Component } from \"react\"\nimport { Row, Col, Table, Button } from \"react-bootstrap\"\nimport { connect } from \"react-redux\"\nimport { FaChevronLeft, FaChevronRight } from \"react-icons/fa\"\nimport { getKits, removeKit, addKit, getHardwares, sendCalibrationNotification, updateKit } from \"@actions/inventory\"\nimport { selectRoleAuthorization } from \"@selectors/authorization\"\nimport { selectKits, kitErrors, selectHardwares, loadingHardwares } from \"@selectors/inventory\"\nimport { KitForm } from \"@components/Dashboard/Inventory/Kit/KitForm\"\nimport { EditKitForm } from \"@components/Dashboard/Inventory/Kit/EditKitForm\"\nimport InventoryIssues from \"@components/Dashboard/Inventory/Issues\"\nimport { ModalDelete } from \"@components/shared/ModalDelete\"\nimport { Loading } from \"@components/shared/Loading\"\nimport { Dashboard } from \"@components/Dashboard\"\nimport { issueCategory } from \"@data\"\nimport moment from \"moment\"\nimport PropTypes from \"prop-types\"\n\nclass Kit extends Component {\n  state = {\n    isModalOpen: null,\n    currentDate: new Date(),\n    inventoryData: null,\n    kitId: null,\n    currentPage: 1,\n  }\n\n  componentDidMount() {\n    this.props.getKits()\n    this.props.getHardwares()\n  }\n\n  toggleModal = isModalOpen => {\n    this.setState({ isModalOpen })\n  }\n\n  addViewIssue = (id, name) => {\n    this.setState({\n      inventoryData: {\n        id,\n        name,\n      },\n    })\n  }\n\n  editKit = id => {\n    const { kits } = this.props\n    this.setState({ kitId: kits.find(kit => kit.id === id) })\n  }\n\n  pageSwitcher = value => {\n    if (value === \"next\") {\n      this.setState({ currentPage: this.state.currentPage + 1 })\n    } else {\n      this.setState({ currentPage: this.state.currentPage - 1 })\n    }\n  }\n\n  render() {\n    const { roleName, error, kits, hardwares, addKit, updateKit, loading, removeKit } = this.props\n    const { isModalOpen, currentDate, kitId, inventoryData, currentPage } = this.state\n\n    let alertName = \"\"\n    let difference = \"\"\n\n    const lastItem = currentPage * 10\n    const firstItem = lastItem - 10\n\n    let formatedItems = []\n    formatedItems =\n      kits.length && kits.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).slice(firstItem, lastItem)\n\n    const renderPageNumbers = () => {\n      return (\n        <Row className=\"pagination\">\n          <Col lg=\"9\">\n            <p>\n              Showing {firstItem + 1}-{kits.length > firstItem && kits.length < lastItem ? kits.length : lastItem} of{\" \"}\n              {kits && kits.length} entries\n            </p>\n          </Col>\n          <Col>\n            <div className=\"arrows d-flex justify-content-end\">\n              <Button onClick={() => this.pageSwitcher(\"prev\")} disabled={firstItem === 0}>\n                <FaChevronLeft />\n              </Button>\n              <Button onClick={() => this.pageSwitcher(\"next\")} disabled={lastItem >= kits.length}>\n                <FaChevronRight />\n              </Button>\n            </div>\n          </Col>\n        </Row>\n      )\n    }\n\n    if (loading) return <Loading />\n    if (!formatedItems.length) return null\n\n    return (\n      <Dashboard>\n        <div className=\"ms-panel\">\n          <div className=\"ms-panel-header\">\n            <h6>Hardware Kits</h6>\n          </div>\n          <div className=\"ms-panel-body\">\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Hardware</th>\n                  <th>Serial Number</th>\n                  <th>Calibration Number</th>\n                  <th>Current Cal Date</th>\n                  <th>Current Due Date</th>\n                  <th>Issues</th>\n                  {(roleName === \"admin\" || roleName === \"technical-manager\") && (\n                    <>\n                      <th>Edit</th>\n                      <th>Delete?</th>\n                    </>\n                  )}\n                </tr>\n              </thead>\n              <tbody>\n                {formatedItems.map(\n                  ({ id, name, isFaulty, hardwares, calibrationNumber, calibrationCurDate, calibrationDueDate }) => (\n                    <tr key={id} className={`${isFaulty && \"notavailable\"}`}>\n                      <td>{name}</td>\n                      <td>\n                        {hardwares.map(({ type, model }) => (\n                          <p>\n                            {type.name} {model.manufacture.name} {model.name}\n                          </p>\n                        ))}\n                      </td>\n                      <td>\n                        {hardwares.map(({ serialNumber }) => (\n                          <p> {serialNumber}</p>\n                        ))}\n                      </td>\n                      <td>{calibrationNumber}</td>\n                      <td>{calibrationCurDate.substr(0, 10)}</td>\n                      <td>\n                        {\n                          ((difference = moment.duration(new Date(calibrationDueDate) - currentDate, \"milliseconds\")),\n                          (alertName =\n                            currentDate > new Date(calibrationDueDate)\n                              ? \"redAlert\"\n                              : difference.asDays() < 14 && difference.asDays() > 0\n                              ? \"yellowAlert\"\n                              : null),\n                          (<a className={alertName}>{calibrationDueDate.substr(0, 10)}</a>))\n                        }\n                      </td>\n                      <td>\n                        <Button id={id} variant=\"primary\" onClick={() => this.addViewIssue(id, name)}>\n                          Add/View\n                        </Button>\n                      </td>\n                      {(roleName === \"admin\" || roleName === \"technical-manager\") && (\n                        <>\n                          <td>\n                            {\n                              <Button id={id} variant=\"primary\" onClick={() => this.editKit(id)}>\n                                Edit/Add Item\n                              </Button>\n                            }\n                          </td>\n                          <td>\n                            <Button id={id} variant=\"primary\" onClick={() => this.toggleModal(id)}>\n                              Delete Item\n                            </Button>\n                            <ModalDelete\n                              id={id}\n                              hideModal={this.toggleModal}\n                              isModalOpen={isModalOpen}\n                              deleteState={() => removeKit(id)}\n                            />\n                          </td>\n                        </>\n                      )}\n                    </tr>\n                  )\n                )}\n              </tbody>\n            </Table>\n            {renderPageNumbers()}\n          </div>\n        </div>\n        <Row>\n          {(roleName === \"admin\" || roleName === \"technical-manager\") && (\n            <Col lg=\"5\">\n              <div className=\"ms-panel\">\n                {kitId ? (\n                  <EditKitForm\n                    kitToEdit={kitId}\n                    hideKit={this.editKit}\n                    updateKit={updateKit}\n                    sendCalibrationNotification={sendCalibrationNotification}\n                    kits={kits}\n                    error={error}\n                  />\n                ) : (\n                  <KitForm hardwaresItems={hardwares} {...this.props} />\n                )}\n              </div>\n            </Col>\n          )}\n          <Col lg=\"7\">\n            {inventoryData && (\n              <InventoryIssues\n                inventory={inventoryData}\n                addViewIssue={this.addViewIssue}\n                category={issueCategory.find(item => item.name === \"Kit\")}\n              />\n            )}\n          </Col>\n        </Row>\n      </Dashboard>\n    )\n  }\n}\n\nKit.propTypes = {\n  isModalOpen: PropTypes.number.isRequired,\n  loading: PropTypes.bool.isRequired,\n  kits: PropTypes.array.isRequired,\n  hardwares: PropTypes.array.isRequired,\n  getKits: PropTypes.func.isRequired,\n  removeKit: PropTypes.func.isRequired,\n  addKit: PropTypes.func.isRequired,\n  getHardwares: PropTypes.func.isRequired,\n  updateKit: PropTypes.func.isRequired,\n  sendCalibrationNotification: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  kits: selectKits(state),\n  hardwares: selectHardwares(state),\n  loading: loadingHardwares(state),\n  error: kitErrors(state),\n  roleName: selectRoleAuthorization(state),\n})\n\nexport default connect(mapStateToProps, {\n  getKits,\n  removeKit,\n  addKit,\n  getHardwares,\n  updateKit,\n  sendCalibrationNotification,\n})(Kit)\n"
  ],
  "sourceRoot": ""
}
